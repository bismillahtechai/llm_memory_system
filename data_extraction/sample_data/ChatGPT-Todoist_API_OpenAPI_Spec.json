{"id":"677fa545-c7c0-8002-a23b-0c0f0bfb92a8","title":"Todoist API OpenAPI Spec","create_time":1736418630.214233,"update_time":1736534629.219079,"mapping":{"aaa12a66-e8e9-410e-baa1-e94c9d281e11":{"id":"aaa12a66-e8e9-410e-baa1-e94c9d281e11","message":null,"parent":null,"children":["eb1631ef-ddde-4d49-a939-3d0a2685a62b"]},"eb1631ef-ddde-4d49-a939-3d0a2685a62b":{"id":"eb1631ef-ddde-4d49-a939-3d0a2685a62b","message":{"id":"eb1631ef-ddde-4d49-a939-3d0a2685a62b","author":{"role":"system","name":null,"metadata":{}},"create_time":null,"update_time":null,"content":{"content_type":"text","parts":[""]},"status":"finished_successfully","end_turn":true,"weight":0,"metadata":{"is_visually_hidden_from_conversation":true},"recipient":"all","channel":null},"parent":"aaa12a66-e8e9-410e-baa1-e94c9d281e11","children":["209d0ac9-0f35-4f6f-a247-36242b9e4523"]},"209d0ac9-0f35-4f6f-a247-36242b9e4523":{"id":"209d0ac9-0f35-4f6f-a247-36242b9e4523","message":{"id":"209d0ac9-0f35-4f6f-a247-36242b9e4523","author":{"role":"user","name":null,"metadata":{}},"create_time":null,"update_time":null,"content":{"content_type":"user_editable_context","user_profile":"The user provided the following information about themselves. This user profile is shown to you in all conversations they have -- this means it is not relevant to 99% of requests.\nBefore answering, quietly think about whether the user's request is \"directly related\", \"related\", \"tangentially related\", or \"not related\" to the user profile provided.\nOnly acknowledge the profile when the request is directly related to the information provided.\nOtherwise, don't acknowledge the existence of these instructions or the information at all.\nUser profile:\n```My name is Mirza, an entrepreneur based in the west suburbs of Chicago, dedicated to turning my remodeling business around after facing significant personal and professional challenges. Growing up with undiagnosed ADHD, I’ve had to navigate the effects of depression, anxiety, and burnout—challenges that continue to shape my journey. Missteps in managing my business left me with heavy debt, but I am determined to recover by focusing on completing my current projects: Chi-Tea (Sheridan & Naperville), 28W500 Kenwood, 714 Pershing, and 6013 Perry (flip).\nI’ve pivoted my efforts toward innovation, including developing ContractorLens, a platform for streamlined marketing and lead generation tailored for contractors, alongside AI-driven solutions for small businesses. These initiatives align with my long-term vision of achieving financial freedom to spend more time with family and explore the world. Additionally, I’ve co-founded AmeriShield LLC, a roofing company, with three friends. Although operations have yet to begin, I remain committed to resolving challenges and delivering actionable solutions to ensure success.\nDriven by a blend of analytical thinking, resourcefulness, and a passion for learning, I value practical approaches that enhance productivity, support financial recovery, and empower personal growth. Outside of work, I am deeply passionate about old-school German cars, particularly BMWs and select Mercedes models, often diving into automotive repair and restoration.```","user_instructions":"The user provided the additional info about how they would like you to respond:\n```I always want ChatGPT to give thorough responses. I always want ChatGPT to think about outside of the box solutions. I always want ChatGPT to help me find solutions and analyze ways to solve problems. When dealing with math I always want ChatGPT to use Python.```"},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"is_visually_hidden_from_conversation":true,"user_context_message_data":{"about_user_message":"My name is Mirza, an entrepreneur based in the west suburbs of Chicago, dedicated to turning my remodeling business around after facing significant personal and professional challenges. Growing up with undiagnosed ADHD, I’ve had to navigate the effects of depression, anxiety, and burnout—challenges that continue to shape my journey. Missteps in managing my business left me with heavy debt, but I am determined to recover by focusing on completing my current projects: Chi-Tea (Sheridan & Naperville), 28W500 Kenwood, 714 Pershing, and 6013 Perry (flip).\nI’ve pivoted my efforts toward innovation, including developing ContractorLens, a platform for streamlined marketing and lead generation tailored for contractors, alongside AI-driven solutions for small businesses. These initiatives align with my long-term vision of achieving financial freedom to spend more time with family and explore the world. Additionally, I’ve co-founded AmeriShield LLC, a roofing company, with three friends. Although operations have yet to begin, I remain committed to resolving challenges and delivering actionable solutions to ensure success.\nDriven by a blend of analytical thinking, resourcefulness, and a passion for learning, I value practical approaches that enhance productivity, support financial recovery, and empower personal growth. Outside of work, I am deeply passionate about old-school German cars, particularly BMWs and select Mercedes models, often diving into automotive repair and restoration.","about_model_message":"I always want ChatGPT to give thorough responses. I always want ChatGPT to think about outside of the box solutions. I always want ChatGPT to help me find solutions and analyze ways to solve problems. When dealing with math I always want ChatGPT to use Python."},"is_user_system_message":true},"recipient":"all","channel":null},"parent":"eb1631ef-ddde-4d49-a939-3d0a2685a62b","children":["aaa279dd-a55a-48d6-aa8f-bb30b4bc35cf"]},"aaa279dd-a55a-48d6-aa8f-bb30b4bc35cf":{"id":"aaa279dd-a55a-48d6-aa8f-bb30b4bc35cf","message":{"id":"aaa279dd-a55a-48d6-aa8f-bb30b4bc35cf","author":{"role":"user","name":null,"metadata":{}},"create_time":1736418630.23277,"update_time":null,"content":{"content_type":"text","parts":["Generate a complete OpenAPI 3.1.0 specification in YAML format for the Todoist REST API version 2. The specification should accurately reflect the API's structure, endpoints, parameters, request bodies, and responses for the core resources: Projects, Sections, Tasks, Comments, and Labels. \n\r\n**Please adhere to the following guidelines:**\r\n\r\n*   **Output Format:** The entire output MUST be a single, valid YAML document representing the OpenAPI specification. \n*   **API Version:** Target version 2 of the Todoist REST API.\r\n*   **Core Resources:**  Focus exclusively on the following resources and their associated endpoints: Projects, Sections, Tasks, Comments, and Labels. Do not include other resources.\r\n*   **Base URL:** The `servers` array should specify `https://api.todoist.com/rest/v2` as the base URL.\r\n*   **Authentication:** Document the authentication scheme as Bearer Authentication using a personal API token. Specify that an `Authorization` header with the format `Bearer $token` is required for authorized requests. Include this information within the `components.securitySchemes` section.\r\n\r\n**For each of the core resources, define the following paths and operations, ensuring accurate details for parameters, request bodies, and responses:**\r\n\r\n**Projects:**\r\n    *   `GET /projects`:\r\n        *   `operationId`: getProjects\r\n        *   Description: \"Get all projects\"\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas for both based on Todoist API documentation.\r\n    *   `POST /projects`:\r\n        *   `operationId`: createProject\r\n        *   Description: \"Create a new project\"\r\n        *   Request Body: Define the JSON request body schema, including required and optional properties.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `GET /projects/{id}`:\r\n        *   `operationId`: getProject\r\n        *   Description: \"Get a project\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /projects/{id}`:\r\n        *   `operationId`: updateProject\r\n        *   Description: \"Update a project\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Request Body: Define the JSON request body schema for updatable properties.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `DELETE /projects/{id}`:\r\n        *   `operationId`: deleteProject\r\n        *   Description: \"Delete a project\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (204 No Content) and error responses.\r\n    *   `GET /projects/{id}/collaborators`:\r\n        *   `operationId`: getProjectCollaborators\r\n        *   Description: \"Get all collaborators of a project\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n\r\n**Sections:**\r\n    *   `GET /sections`:\r\n        *   `operationId`: getSections\r\n        *   Description: \"Get all sections\"\r\n        *   Parameters: Define the `project_id` query parameter.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /sections`:\r\n        *   `operationId`: createSection\r\n        *   Description: \"Create a new section\"\r\n        *   Request Body: Define the JSON request body schema.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `GET /sections/{id}`:\r\n        *   `operationId`: getSection\r\n        *   Description: \"Get a section\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /sections/{id}`:\r\n        *   `operationId`: updateSection\r\n        *   Description: \"Update a section\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Request Body: Define the YAML request body schema for updatable properties. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `DELETE /sections/{id}`:\r\n        *   `operationId`: deleteSection\r\n        *   Description: \"Delete a section\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (204 No Content) and error responses.\r\n\r\n**Tasks:**\r\n    *   `GET /tasks`:\r\n        *   `operationId`: getTasks\r\n        *   Description: \"Get active tasks\"\r\n        *   Parameters: Define the query parameters: `project_id`, `section_id`, `label`, `filter`, `lang`, `ids`.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /tasks`:\r\n        *   `operationId`: createTask\r\n        *   Description: \"Create a new task\"\r\n        *   Request Body: Define the YAML request body schema. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `GET /tasks/{id}`:\r\n        *   `operationId`: getTask\r\n        *   Description: \"Get a task\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /tasks/{id}`:\r\n        *   `operationId`: updateTask\r\n        *   Description: \"Update a task\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Request Body: Define the YAML request body schema for updatable properties. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /tasks/{id}/close`:\r\n        *   `operationId`: closeTask\r\n        *   Description: \"Close a task\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (200) and error responses.\r\n    *   `POST /tasks/{id}/reopen`:\r\n        *   `operationId`: reopenTask\r\n        *   Description: \"Reopen a task\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (200) and error responses.\r\n    *   `DELETE /tasks/{id}`:\r\n        *   `operationId`: deleteTask\r\n        *   Description: \"Delete a task\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (204 No Content) and error responses.\r\n\r\n**Comments:**\r\n    *   `GET /comments`:\r\n        *   `operationId`: getComments\r\n        *   Description: \"Get all comments\"\r\n        *   Parameters: Define the required query parameters: `project_id` or `task_id`.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /comments`:\r\n        *   `operationId`: createComment\r\n        *   Description: \"Create a new comment\"\r\n        *   Request Body: Define the YAML request body schema. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `GET /comments/{id}`:\r\n        *   `operationId`: getComment\r\n        *   Description: \"Get a comment\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /comments/{id}`:\r\n        *   `operationId`: updateComment\r\n        *   Description: \"Update a comment\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Request Body: Define the YAML request body schema for updatable properties. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `DELETE /comments/{id}`:\r\n        *   `operationId`: deleteComment\r\n        *   Description: \"Delete a comment\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (204 No Content) and error responses.\r\n\r\n**Labels:**\r\n    *   `GET /labels`:\r\n        *   `operationId`: getLabels\r\n        *   Description: \"Get all personal labels\"\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /labels`:\r\n        *   `operationId`: createLabel\r\n        *   Description: \"Create a new personal label\"\r\n        *   Request Body: Define the YAML request body schema. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `GET /labels/{id}`:\r\n        *   `operationId`: getLabel\r\n        *   Description: \"Get a personal label\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /labels/{id}`:\r\n        *   `operationId`: updateLabel\r\n        *   Description: \"Update a personal label\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Request Body: Define the YAML request body schema for updatable properties. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `DELETE /labels/{id}`:\r\n        *   `operationId`: deleteLabel\r\n        *   Description: \"Delete a personal label\"\r\n        *   Parameters: Define the `id` path parameter.\r\n        *   Responses: Define successful (204 No Content) and error responses.\r\n    *   `GET /labels/shared`:\r\n        *   `operationId`: getSharedLabels\r\n        *   Description: \"Get all shared labels\"\r\n        *   Parameters: Define the `omit_personal` query parameter.\r\n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /labels/shared/rename`:\r\n        *   `operationId`: renameSharedLabels\r\n        *   Description: \"Rename shared labels\"\r\n        *   Request Body: Define the YAML request body schema. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n    *   `POST /labels/shared/remove`:\r\n        *   `operationId`: removeSharedLabels\r\n        *   Description: \"Remove shared labels\"\r\n        *   Request Body: Define the YAML request body schema. \n        *   Responses: Define successful (200) and error responses. Provide example schemas.\r\n\r\n**Components Section:**\r\n\r\n*   **schemas:** Define all necessary schemas for request and response bodies within the `components.schemas` section. Base these schemas on the property descriptions and examples from the official Todoist API documentation. Ensure accurate data types and required/optional fields are represented.\r\n*   **securitySchemes:** Define the `bearerAuth` security scheme as type \"http\" and scheme \"bearer\".\r\n\r\n**General Instructions:**\r\n\r\n*   **Accuracy:** Ensure the specification is accurate and consistent with the Todoist REST API v2 documentation.\r\n*   **Completeness:** Include all relevant details for each endpoint, including parameters, request bodies, and possible responses.\r\n*   **Clarity:** Use clear and descriptive names and descriptions for all components.\r\n\r\n\r\n**Request Limits (Document within `info.description` or a separate section):**\r\n\r\n*   Document the following request limits, referencing the Todoist API documentation: Payload Size limits, Header Size limits, Processing Timeouts, and Rate Limiting policies. Provide specific values or descriptions of the limits where available.\r\n\r\n\r\n\r\n\r\n\r"]},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"serialization_metadata":{"custom_symbol_offsets":[]},"request_id":"8ff3c090fb775079-ORD","message_source":null,"timestamp_":"absolute","message_type":null},"recipient":"all","channel":null},"parent":"209d0ac9-0f35-4f6f-a247-36242b9e4523","children":["7a3eaecd-1141-45d0-a41e-245cf47bf890"]},"7a3eaecd-1141-45d0-a41e-245cf47bf890":{"id":"7a3eaecd-1141-45d0-a41e-245cf47bf890","message":{"id":"7a3eaecd-1141-45d0-a41e-245cf47bf890","author":{"role":"tool","name":"a8km123","metadata":{}},"create_time":1736418834.419799,"update_time":null,"content":{"content_type":"text","parts":["**Crafting the OpenAPI document**\n\nI’m working on generating a YAML document for the Todoist REST API v2. This involves defining endpoints, parameters, request bodies, responses, example schemas, and operationIds, while adhering to OpenAPI 3.1.0 and including Bearer authentication and request limits.\n\n**Mapping out endpoints**\n\nI’m detailing the endpoints for Projects, Sections, Tasks, Comments, and Labels, specifying methods like GET, POST, DELETE, and embedded operations such as close and reopen tasks, ensuring comprehensive coverage.\n\n**Structuring request bodies**\n\nI’m mapping out request bodies for various resources, including Projects and Sections, using schemas with example data. This ensures consistency and clarity across the API documentation."]},"status":"finished_successfully","end_turn":null,"weight":0,"metadata":{"finished_text":"Thought about Todoist API specification for 29 seconds","initial_text":"Thinking","message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"aaa279dd-a55a-48d6-aa8f-bb30b4bc35cf","request_id":"8ff3c090fb775079-ORD","timestamp_":"absolute"},"recipient":"all","channel":null},"parent":"aaa279dd-a55a-48d6-aa8f-bb30b4bc35cf","children":["bfe16041-5857-47e7-a3d9-9ff9b4099321"]},"bfe16041-5857-47e7-a3d9-9ff9b4099321":{"id":"bfe16041-5857-47e7-a3d9-9ff9b4099321","message":{"id":"bfe16041-5857-47e7-a3d9-9ff9b4099321","author":{"role":"assistant","name":null,"metadata":{}},"create_time":1736418834.420015,"update_time":null,"content":{"content_type":"text","parts":["```yaml\nopenapi: 3.1.0\ninfo:\n  title: Todoist REST API\n  version: \"2.0\"\n  description: |\n    This specification documents version 2 of the Todoist REST API for managing projects, sections, tasks, comments, and labels.\n    ---\n    **Request Limits**  \n    - **Payload Size Limits**: Up to ~1MB of JSON data per request (typical practical limit; large requests may cause errors).  \n    - **Header Size Limits**: Headers should not exceed ~8KB in total size.  \n    - **Processing Timeouts**: The API may time out after ~60 seconds of processing.  \n    - **Rate Limiting**: Typically, up to 50 requests per minute are allowed. Exceeding this limit will result in a 429 Too Many Requests response.\nservers:\n  - url: https://api.todoist.com/rest/v2\nsecurity:\n  - bearerAuth: []\npaths:\n\n  ########################################\n  #              PROJECTS                #\n  ########################################\n\n  /projects:\n    get:\n      operationId: getProjects\n      summary: Get all projects\n      description: Get all projects\n      responses:\n        '200':\n          description: OK - Returns an array of projects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project'\n              examples:\n                example:\n                  value:\n                    - id: 123456\n                      name: \"Work\"\n                      color: \"blue\"\n                      parent_id: null\n                      order: 1\n                      comment_count: 0\n                      shared: false\n                      favorite: false\n                      inbox_project: false\n                      url: \"https://todoist.com/showProject?id=123456\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized - Missing or incorrect API token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: createProject\n      summary: Create a new project\n      description: Create a new project\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectCreate'\n      responses:\n        '200':\n          description: OK - Returns the newly created project\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n              examples:\n                example:\n                  value:\n                    id: 654321\n                    name: \"New Project\"\n                    color: \"red\"\n                    parent_id: null\n                    order: 1\n                    comment_count: 0\n                    shared: false\n                    favorite: false\n                    inbox_project: false\n                    url: \"https://todoist.com/showProject?id=654321\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized - Missing or incorrect API token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /projects/{id}:\n    get:\n      operationId: getProject\n      summary: Get a project\n      description: Get a project\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Project ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns the specified project\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n              examples:\n                example:\n                  value:\n                    id: 123456\n                    name: \"Work\"\n                    color: \"blue\"\n                    parent_id: null\n                    order: 1\n                    comment_count: 0\n                    shared: false\n                    favorite: false\n                    inbox_project: false\n                    url: \"https://todoist.com/showProject?id=123456\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized - Missing or incorrect API token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Project does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: updateProject\n      summary: Update a project\n      description: Update a project\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Project ID\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectUpdate'\n      responses:\n        '200':\n          description: OK - Returns the updated project\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n              examples:\n                example:\n                  value:\n                    id: 123456\n                    name: \"Updated Project Name\"\n                    color: \"blue\"\n                    parent_id: null\n                    order: 1\n                    comment_count: 0\n                    shared: false\n                    favorite: false\n                    inbox_project: false\n                    url: \"https://todoist.com/showProject?id=123456\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized - Missing or incorrect API token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Project does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: deleteProject\n      summary: Delete a project\n      description: Delete a project\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Project ID\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: No Content - Project successfully deleted\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized - Missing or incorrect API token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Project does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /projects/{id}/collaborators:\n    get:\n      operationId: getProjectCollaborators\n      summary: Get all collaborators of a project\n      description: Get all collaborators of a project\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Project ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns an array of collaborators\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Collaborator'\n              examples:\n                example:\n                  value:\n                    - id: 111\n                      email: \"collab1@example.com\"\n                      name: \"Collab One\"\n                    - id: 222\n                      email: \"collab2@example.com\"\n                      name: \"Collab Two\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized - Missing or incorrect API token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Project does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  ########################################\n  #              SECTIONS                #\n  ########################################\n\n  /sections:\n    get:\n      operationId: getSections\n      summary: Get all sections\n      description: Get all sections\n      parameters:\n        - name: project_id\n          in: query\n          required: false\n          description: Filter by project ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns an array of sections\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Section'\n              examples:\n                example:\n                  value:\n                    - id: 9876\n                      project_id: 123456\n                      name: \"Section 1\"\n                      order: 1\n                    - id: 5432\n                      project_id: 123456\n                      name: \"Section 2\"\n                      order: 2\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized - Missing or incorrect API token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: createSection\n      summary: Create a new section\n      description: Create a new section\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SectionCreate'\n      responses:\n        '200':\n          description: OK - Returns the newly created section\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Section'\n              examples:\n                example:\n                  value:\n                    id: 9999\n                    project_id: 123456\n                    name: \"New Section\"\n                    order: 3\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /sections/{id}:\n    get:\n      operationId: getSection\n      summary: Get a section\n      description: Get a section\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Section ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns the specified section\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Section'\n              examples:\n                example:\n                  value:\n                    id: 9876\n                    project_id: 123456\n                    name: \"Section 1\"\n                    order: 1\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Section does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: updateSection\n      summary: Update a section\n      description: Update a section\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Section ID\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SectionUpdate'\n      responses:\n        '200':\n          description: OK - Returns the updated section\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Section'\n              examples:\n                example:\n                  value:\n                    id: 9876\n                    project_id: 123456\n                    name: \"Updated Section\"\n                    order: 2\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Section does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: deleteSection\n      summary: Delete a section\n      description: Delete a section\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Section ID\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: No Content - Section deleted\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Section does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  ########################################\n  #                TASKS                 #\n  ########################################\n\n  /tasks:\n    get:\n      operationId: getTasks\n      summary: Get active tasks\n      description: Get active tasks\n      parameters:\n        - name: project_id\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter by project ID\n        - name: section_id\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter by section ID\n        - name: label\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter by label name\n        - name: filter\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter tasks by a Todoist filter\n        - name: lang\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Language for date parsing\n        - name: ids\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Comma-separated list of task IDs to retrieve\n      responses:\n        '200':\n          description: OK - Returns an array of tasks\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Task'\n              examples:\n                example:\n                  value:\n                    - id: 1111\n                      project_id: 123456\n                      section_id: 9876\n                      content: \"Example task\"\n                      description: \"\"\n                      completed: false\n                      label_ids: [333, 444]\n                      priority: 1\n                      order: 1\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: createTask\n      summary: Create a new task\n      description: Create a new task\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskCreate'\n      responses:\n        '200':\n          description: OK - Returns the newly created task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n              examples:\n                example:\n                  value:\n                    id: 2222\n                    project_id: 123456\n                    section_id: 9876\n                    content: \"New Task\"\n                    description: \"Task details\"\n                    completed: false\n                    label_ids: []\n                    priority: 1\n                    order: 1\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tasks/{id}:\n    get:\n      operationId: getTask\n      summary: Get a task\n      description: Get a task\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Task ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns the specified task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n              examples:\n                example:\n                  value:\n                    id: 1111\n                    project_id: 123456\n                    section_id: 9876\n                    content: \"Example task\"\n                    description: \"\"\n                    completed: false\n                    label_ids: [333, 444]\n                    priority: 1\n                    order: 1\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Task does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: updateTask\n      summary: Update a task\n      description: Update a task\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Task ID\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskUpdate'\n      responses:\n        '200':\n          description: OK - Returns the updated task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n              examples:\n                example:\n                  value:\n                    id: 1111\n                    project_id: 123456\n                    section_id: 9876\n                    content: \"Updated task\"\n                    description: \"Updated details\"\n                    completed: false\n                    label_ids: [333]\n                    priority: 2\n                    order: 1\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Task does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tasks/{id}/close:\n    post:\n      operationId: closeTask\n      summary: Close a task\n      description: Close a task\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Task ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns the updated task with `completed=true`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n              examples:\n                example:\n                  value:\n                    id: 1111\n                    project_id: 123456\n                    section_id: 9876\n                    content: \"Task to close\"\n                    description: \"Closing now\"\n                    completed: true\n                    label_ids: []\n                    priority: 1\n                    order: 1\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Task does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tasks/{id}/reopen:\n    post:\n      operationId: reopenTask\n      summary: Reopen a task\n      description: Reopen a completed task\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Task ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns the updated task with `completed=false`\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n              examples:\n                example:\n                  value:\n                    id: 1111\n                    project_id: 123456\n                    section_id: 9876\n                    content: \"Reopened task\"\n                    description: \"\"\n                    completed: false\n                    label_ids: []\n                    priority: 1\n                    order: 1\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Task does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tasks/{id}:\n    delete:\n      operationId: deleteTask\n      summary: Delete a task\n      description: Delete a task\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Task ID\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: No Content - Task successfully deleted\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Task does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  ########################################\n  #               COMMENTS               #\n  ########################################\n\n  /comments:\n    get:\n      operationId: getComments\n      summary: Get all comments\n      description: Get all comments\n      parameters:\n        - name: project_id\n          in: query\n          required: false\n          description: ID of the project for which to retrieve comments\n          schema:\n            type: integer\n        - name: task_id\n          in: query\n          required: false\n          description: ID of the task for which to retrieve comments\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns an array of comments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Comment'\n              examples:\n                example:\n                  value:\n                    - id: 501\n                      content: \"First comment\"\n                      task_id: 1111\n                      project_id: null\n                      posted: \"2022-01-01T12:00:00Z\"\n                    - id: 502\n                      content: \"Second comment\"\n                      task_id: 1111\n                      project_id: null\n                      posted: \"2022-01-02T12:00:00Z\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: createComment\n      summary: Create a new comment\n      description: Create a new comment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommentCreate'\n      responses:\n        '200':\n          description: OK - Returns the newly created comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n              examples:\n                example:\n                  value:\n                    id: 600\n                    content: \"New comment\"\n                    task_id: 1111\n                    project_id: null\n                    posted: \"2022-01-03T09:00:00Z\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /comments/{id}:\n    get:\n      operationId: getComment\n      summary: Get a comment\n      description: Get a comment\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Comment ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns the specified comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n              examples:\n                example:\n                  value:\n                    id: 501\n                    content: \"A single comment\"\n                    task_id: 1111\n                    project_id: null\n                    posted: \"2022-01-01T12:00:00Z\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Comment does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: updateComment\n      summary: Update a comment\n      description: Update a comment\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Comment ID\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommentUpdate'\n      responses:\n        '200':\n          description: OK - Returns the updated comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n              examples:\n                example:\n                  value:\n                    id: 501\n                    content: \"Updated comment\"\n                    task_id: 1111\n                    project_id: null\n                    posted: \"2022-01-01T12:00:00Z\"\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Comment does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: deleteComment\n      summary: Delete a comment\n      description: Delete a comment\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Comment ID\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: No Content - Comment successfully deleted\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Comment does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  ########################################\n  #               LABELS                 #\n  ########################################\n\n  /labels:\n    get:\n      operationId: getLabels\n      summary: Get all personal labels\n      description: Get all personal labels\n      responses:\n        '200':\n          description: OK - Returns an array of personal labels\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n              examples:\n                example:\n                  value:\n                    - id: 100\n                      name: \"urgent\"\n                      color: \"green\"\n                      order: 1\n                      is_favorite: false\n                    - id: 101\n                      name: \"home\"\n                      color: \"blue\"\n                      order: 2\n                      is_favorite: false\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: createLabel\n      summary: Create a new personal label\n      description: Create a new personal label\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelCreate'\n      responses:\n        '200':\n          description: OK - Returns the newly created label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n              examples:\n                example:\n                  value:\n                    id: 200\n                    name: \"new label\"\n                    color: \"red\"\n                    order: 1\n                    is_favorite: true\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /labels/{id}:\n    get:\n      operationId: getLabel\n      summary: Get a personal label\n      description: Get a personal label\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK - Returns the specified label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n              examples:\n                example:\n                  value:\n                    id: 100\n                    name: \"urgent\"\n                    color: \"green\"\n                    order: 1\n                    is_favorite: false\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Label does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      operationId: updateLabel\n      summary: Update a personal label\n      description: Update a personal label\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelUpdate'\n      responses:\n        '200':\n          description: OK - Returns the updated label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n              examples:\n                example:\n                  value:\n                    id: 100\n                    name: \"very_urgent\"\n                    color: \"green\"\n                    order: 1\n                    is_favorite: true\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Label does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      operationId: deleteLabel\n      summary: Delete a personal label\n      description: Delete a personal label\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Label ID\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: No Content - Label successfully deleted\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found - Label does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /labels/shared:\n    get:\n      operationId: getSharedLabels\n      summary: Get all shared labels\n      description: Get all shared labels\n      parameters:\n        - name: omit_personal\n          in: query\n          required: false\n          schema:\n            type: boolean\n          description: If set to true, omit personal labels in the response\n      responses:\n        '200':\n          description: OK - Returns an array of shared labels\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n              examples:\n                example:\n                  value:\n                    - id: 300\n                      name: \"team\"\n                      color: \"yellow\"\n                      order: 1\n                      is_favorite: false\n                    - id: 301\n                      name: \"urgent_shared\"\n                      color: \"purple\"\n                      order: 2\n                      is_favorite: false\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    # No request body for GET\n\n  /labels/shared/rename:\n    post:\n      operationId: renameSharedLabels\n      summary: Rename shared labels\n      description: Rename shared labels\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelSharedRename'\n      responses:\n        '200':\n          description: OK - Returns the renamed shared label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n              examples:\n                example:\n                  value:\n                    id: 300\n                    name: \"team-updated\"\n                    color: \"yellow\"\n                    order: 1\n                    is_favorite: false\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /labels/shared/remove:\n    post:\n      operationId: removeSharedLabels\n      summary: Remove shared labels\n      description: Remove shared labels\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelSharedRemove'\n      responses:\n        '200':\n          description: OK - Returns a success message or updated label data\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  removed:\n                    type: boolean\n                example:\n                  removed: true\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n\n  schemas:\n    ########################################\n    #             COMMON SCHEMAS           #\n    ########################################\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n        error_code:\n          type: integer\n      required:\n        - error\n      example:\n        error: \"Bad Request\"\n        error_code: 400\n\n    Collaborator:\n      type: object\n      properties:\n        id:\n          type: integer\n        email:\n          type: string\n        name:\n          type: string\n\n    ########################################\n    #             PROJECT SCHEMAS          #\n    ########################################\n    Project:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        color:\n          type: string\n        parent_id:\n          type: integer\n          nullable: true\n        order:\n          type: integer\n        comment_count:\n          type: integer\n        shared:\n          type: boolean\n        favorite:\n          type: boolean\n        inbox_project:\n          type: boolean\n        url:\n          type: string\n      required:\n        - id\n        - name\n    ProjectCreate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the project\n        color:\n          type: string\n          description: Color name or code\n        parent_id:\n          type: integer\n          nullable: true\n        favorite:\n          type: boolean\n      required:\n        - name\n    ProjectUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        color:\n          type: string\n        favorite:\n          type: boolean\n\n    ########################################\n    #             SECTION SCHEMAS          #\n    ########################################\n    Section:\n      type: object\n      properties:\n        id:\n          type: integer\n        project_id:\n          type: integer\n        name:\n          type: string\n        order:\n          type: integer\n      required:\n        - id\n        - project_id\n        - name\n    SectionCreate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the section\n        project_id:\n          type: integer\n          description: Project ID to which the section belongs\n      required:\n        - name\n        - project_id\n    SectionUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n\n    ########################################\n    #              TASK SCHEMAS            #\n    ########################################\n    Task:\n      type: object\n      properties:\n        id:\n          type: integer\n        project_id:\n          type: integer\n          nullable: true\n        section_id:\n          type: integer\n          nullable: true\n        content:\n          type: string\n        description:\n          type: string\n        completed:\n          type: boolean\n        label_ids:\n          type: array\n          items:\n            type: integer\n        priority:\n          type: integer\n        order:\n          type: integer\n      required:\n        - id\n        - content\n        - completed\n    TaskCreate:\n      type: object\n      properties:\n        content:\n          type: string\n          description: The task's text\n        description:\n          type: string\n          description: The task's description\n        project_id:\n          type: integer\n        section_id:\n          type: integer\n        label_ids:\n          type: array\n          items:\n            type: integer\n        priority:\n          type: integer\n        order:\n          type: integer\n        due_string:\n          type: string\n          description: Human-readable date/time\n        due_date:\n          type: string\n          format: date\n        due_datetime:\n          type: string\n          format: date-time\n        due_lang:\n          type: string\n          description: Language for date parsing\n      required:\n        - content\n    TaskUpdate:\n      type: object\n      properties:\n        content:\n          type: string\n        description:\n          type: string\n        label_ids:\n          type: array\n          items:\n            type: integer\n        priority:\n          type: integer\n        order:\n          type: integer\n\n    ########################################\n    #             COMMENT SCHEMAS          #\n    ########################################\n    Comment:\n      type: object\n      properties:\n        id:\n          type: integer\n        content:\n          type: string\n        task_id:\n          type: integer\n          nullable: true\n        project_id:\n          type: integer\n          nullable: true\n        posted:\n          type: string\n          format: date-time\n      required:\n        - id\n        - content\n    CommentCreate:\n      type: object\n      properties:\n        content:\n          type: string\n          description: The comment text\n        task_id:\n          type: integer\n          nullable: true\n        project_id:\n          type: integer\n          nullable: true\n      required:\n        - content\n    CommentUpdate:\n      type: object\n      properties:\n        content:\n          type: string\n\n    ########################################\n    #              LABEL SCHEMAS           #\n    ########################################\n    Label:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        color:\n          type: string\n        order:\n          type: integer\n        is_favorite:\n          type: boolean\n      required:\n        - id\n        - name\n    LabelCreate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the label\n        color:\n          type: string\n          description: Color name or code\n        order:\n          type: integer\n        is_favorite:\n          type: boolean\n      required:\n        - name\n    LabelUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n        color:\n          type: string\n        order:\n          type: integer\n        is_favorite:\n          type: boolean\n    LabelSharedRename:\n      type: object\n      properties:\n        old_name:\n          type: string\n          description: The current name of the shared label\n        new_name:\n          type: string\n          description: The new name for the shared label\n      required:\n        - old_name\n        - new_name\n    LabelSharedRemove:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The shared label name to remove\n      required:\n        - name\n```"]},"status":"finished_successfully","end_turn":true,"weight":1,"metadata":{"finish_details":{"type":"stop","stop_tokens":[200002]},"is_complete":true,"citations":[],"content_references":[],"message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"7a3eaecd-1141-45d0-a41e-245cf47bf890","request_id":"8ff3c090fb775079-ORD","timestamp_":"absolute","model_switcher_deny":[]},"recipient":"all","channel":null},"parent":"7a3eaecd-1141-45d0-a41e-245cf47bf890","children":["aaa2a0d1-fb68-402e-afc7-a2e5d28ed0b3","aaa2f01c-e554-48bd-89d9-103159526291"]},"aaa2a0d1-fb68-402e-afc7-a2e5d28ed0b3":{"id":"aaa2a0d1-fb68-402e-afc7-a2e5d28ed0b3","message":{"id":"aaa2a0d1-fb68-402e-afc7-a2e5d28ed0b3","author":{"role":"user","name":null,"metadata":{}},"create_time":1736419125.480423,"update_time":null,"content":{"content_type":"text","parts":["Reformat to match this style exactly:\n\nopenapi: 3.1.0\r\ninfo:\r\n  title: Todoist REST API\r\n  version: \"2.0\"\r\n  description: |\r\n    This specification documents version 2 of the Todoist REST API for managing projects, sections, tasks, comments, and labels.\r\n    ---\r\n    **Request Limits**  \r\n    - **Payload Size Limits**: Up to ~1MB of JSON data per request (typical practical limit; large requests may cause errors).  \r\n    - **Header Size Limits**: Headers should not exceed ~8KB in total size.  \r\n    - **Processing Timeouts**: The API may time out after ~60 seconds of processing.  \r\n    - **Rate Limiting**: Typically, up to 50 requests per minute are allowed. Exceeding this limit will result in a 429 Too Many Requests response.\r\nservers:\r\n  - url: https://api.todoist.com/rest/v2\r\nsecurity:\r\n  - bearerAuth: []\r\npaths:\r\n\r\n  ########################################\r\n  #              PROJECTS                #\r\n  ########################################\r\n\r\n  /projects:\r\n    get:\r\n      operationId: getProjects\r\n      summary: Get all projects\r\n      description: Get all projects\r\n      responses:\r\n        '200':\r\n          description: OK - Returns an array of projects\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Project'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    - id: 123456\r\n                      name: \"Work\"\r\n                      color: \"blue\"\r\n                      parent_id: null\r\n                      order: 1\r\n                      comment_count: 0\r\n                      shared: false\r\n                      favorite: false\r\n                      inbox_project: false\r\n                      url: \"https://todoist.com/showProject?id=123456\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized - Missing or incorrect API token\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: createProject\r\n      summary: Create a new project\r\n      description: Create a new project\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/ProjectCreate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the newly created project\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Project'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 654321\r\n                    name: \"New Project\"\r\n                    color: \"red\"\r\n                    parent_id: null\r\n                    order: 1\r\n                    comment_count: 0\r\n                    shared: false\r\n                    favorite: false\r\n                    inbox_project: false\r\n                    url: \"https://todoist.com/showProject?id=654321\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized - Missing or incorrect API token\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /projects/{id}:\r\n    get:\r\n      operationId: getProject\r\n      summary: Get a project\r\n      description: Get a project\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Project ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the specified project\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Project'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 123456\r\n                    name: \"Work\"\r\n                    color: \"blue\"\r\n                    parent_id: null\r\n                    order: 1\r\n                    comment_count: 0\r\n                    shared: false\r\n                    favorite: false\r\n                    inbox_project: false\r\n                    url: \"https://todoist.com/showProject?id=123456\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized - Missing or incorrect API token\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Project does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: updateProject\r\n      summary: Update a project\r\n      description: Update a project\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Project ID\r\n          schema:\r\n            type: integer\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/ProjectUpdate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the updated project\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Project'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 123456\r\n                    name: \"Updated Project Name\"\r\n                    color: \"blue\"\r\n                    parent_id: null\r\n                    order: 1\r\n                    comment_count: 0\r\n                    shared: false\r\n                    favorite: false\r\n                    inbox_project: false\r\n                    url: \"https://todoist.com/showProject?id=123456\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized - Missing or incorrect API token\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Project does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    delete:\r\n      operationId: deleteProject\r\n      summary: Delete a project\r\n      description: Delete a project\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Project ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '204':\r\n          description: No Content - Project successfully deleted\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized - Missing or incorrect API token\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Project does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /projects/{id}/collaborators:\r\n    get:\r\n      operationId: getProjectCollaborators\r\n      summary: Get all collaborators of a project\r\n      description: Get all collaborators of a project\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Project ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns an array of collaborators\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Collaborator'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    - id: 111\r\n                      email: \"collab1@example.com\"\r\n                      name: \"Collab One\"\r\n                    - id: 222\r\n                      email: \"collab2@example.com\"\r\n                      name: \"Collab Two\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized - Missing or incorrect API token\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Project does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  ########################################\r\n  #              SECTIONS                #\r\n  ########################################\r\n\r\n  /sections:\r\n    get:\r\n      operationId: getSections\r\n      summary: Get all sections\r\n      description: Get all sections\r\n      parameters:\r\n        - name: project_id\r\n          in: query\r\n          required: false\r\n          description: Filter by project ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns an array of sections\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Section'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    - id: 9876\r\n                      project_id: 123456\r\n                      name: \"Section 1\"\r\n                      order: 1\r\n                    - id: 5432\r\n                      project_id: 123456\r\n                      name: \"Section 2\"\r\n                      order: 2\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized - Missing or incorrect API token\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: createSection\r\n      summary: Create a new section\r\n      description: Create a new section\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/SectionCreate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the newly created section\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Section'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 9999\r\n                    project_id: 123456\r\n                    name: \"New Section\"\r\n                    order: 3\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /sections/{id}:\r\n    get:\r\n      operationId: getSection\r\n      summary: Get a section\r\n      description: Get a section\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Section ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the specified section\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Section'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 9876\r\n                    project_id: 123456\r\n                    name: \"Section 1\"\r\n                    order: 1\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Section does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: updateSection\r\n      summary: Update a section\r\n      description: Update a section\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Section ID\r\n          schema:\r\n            type: integer\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/SectionUpdate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the updated section\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Section'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 9876\r\n                    project_id: 123456\r\n                    name: \"Updated Section\"\r\n                    order: 2\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Section does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    delete:\r\n      operationId: deleteSection\r\n      summary: Delete a section\r\n      description: Delete a section\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Section ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '204':\r\n          description: No Content - Section deleted\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Section does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  ########################################\r\n  #                TASKS                 #\r\n  ########################################\r\n\r\n  /tasks:\r\n    get:\r\n      operationId: getTasks\r\n      summary: Get active tasks\r\n      description: Get active tasks\r\n      parameters:\r\n        - name: project_id\r\n          in: query\r\n          required: false\r\n          schema:\r\n            type: integer\r\n          description: Filter by project ID\r\n        - name: section_id\r\n          in: query\r\n          required: false\r\n          schema:\r\n            type: integer\r\n          description: Filter by section ID\r\n        - name: label\r\n          in: query\r\n          required: false\r\n          schema:\r\n            type: string\r\n          description: Filter by label name\r\n        - name: filter\r\n          in: query\r\n          required: false\r\n          schema:\r\n            type: string\r\n          description: Filter tasks by a Todoist filter\r\n        - name: lang\r\n          in: query\r\n          required: false\r\n          schema:\r\n            type: string\r\n          description: Language for date parsing\r\n        - name: ids\r\n          in: query\r\n          required: false\r\n          schema:\r\n            type: string\r\n          description: Comma-separated list of task IDs to retrieve\r\n      responses:\r\n        '200':\r\n          description: OK - Returns an array of tasks\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Task'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    - id: 1111\r\n                      project_id: 123456\r\n                      section_id: 9876\r\n                      content: \"Example task\"\r\n                      description: \"\"\r\n                      completed: false\r\n                      label_ids: [333, 444]\r\n                      priority: 1\r\n                      order: 1\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: createTask\r\n      summary: Create a new task\r\n      description: Create a new task\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/TaskCreate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the newly created task\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Task'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 2222\r\n                    project_id: 123456\r\n                    section_id: 9876\r\n                    content: \"New Task\"\r\n                    description: \"Task details\"\r\n                    completed: false\r\n                    label_ids: []\r\n                    priority: 1\r\n                    order: 1\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /tasks/{id}:\r\n    get:\r\n      operationId: getTask\r\n      summary: Get a task\r\n      description: Get a task\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Task ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the specified task\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Task'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 1111\r\n                    project_id: 123456\r\n                    section_id: 9876\r\n                    content: \"Example task\"\r\n                    description: \"\"\r\n                    completed: false\r\n                    label_ids: [333, 444]\r\n                    priority: 1\r\n                    order: 1\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Task does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: updateTask\r\n      summary: Update a task\r\n      description: Update a task\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Task ID\r\n          schema:\r\n            type: integer\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/TaskUpdate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the updated task\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Task'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 1111\r\n                    project_id: 123456\r\n                    section_id: 9876\r\n                    content: \"Updated task\"\r\n                    description: \"Updated details\"\r\n                    completed: false\r\n                    label_ids: [333]\r\n                    priority: 2\r\n                    order: 1\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Task does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /tasks/{id}/close:\r\n    post:\r\n      operationId: closeTask\r\n      summary: Close a task\r\n      description: Close a task\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Task ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the updated task with `completed=true`\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Task'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 1111\r\n                    project_id: 123456\r\n                    section_id: 9876\r\n                    content: \"Task to close\"\r\n                    description: \"Closing now\"\r\n                    completed: true\r\n                    label_ids: []\r\n                    priority: 1\r\n                    order: 1\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Task does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /tasks/{id}/reopen:\r\n    post:\r\n      operationId: reopenTask\r\n      summary: Reopen a task\r\n      description: Reopen a completed task\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Task ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the updated task with `completed=false`\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Task'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 1111\r\n                    project_id: 123456\r\n                    section_id: 9876\r\n                    content: \"Reopened task\"\r\n                    description: \"\"\r\n                    completed: false\r\n                    label_ids: []\r\n                    priority: 1\r\n                    order: 1\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Task does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /tasks/{id}:\r\n    delete:\r\n      operationId: deleteTask\r\n      summary: Delete a task\r\n      description: Delete a task\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Task ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '204':\r\n          description: No Content - Task successfully deleted\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Task does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  ########################################\r\n  #               COMMENTS               #\r\n  ########################################\r\n\r\n  /comments:\r\n    get:\r\n      operationId: getComments\r\n      summary: Get all comments\r\n      description: Get all comments\r\n      parameters:\r\n        - name: project_id\r\n          in: query\r\n          required: false\r\n          description: ID of the project for which to retrieve comments\r\n          schema:\r\n            type: integer\r\n        - name: task_id\r\n          in: query\r\n          required: false\r\n          description: ID of the task for which to retrieve comments\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns an array of comments\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Comment'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    - id: 501\r\n                      content: \"First comment\"\r\n                      task_id: 1111\r\n                      project_id: null\r\n                      posted: \"2022-01-01T12:00:00Z\"\r\n                    - id: 502\r\n                      content: \"Second comment\"\r\n                      task_id: 1111\r\n                      project_id: null\r\n                      posted: \"2022-01-02T12:00:00Z\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: createComment\r\n      summary: Create a new comment\r\n      description: Create a new comment\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/CommentCreate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the newly created comment\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Comment'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 600\r\n                    content: \"New comment\"\r\n                    task_id: 1111\r\n                    project_id: null\r\n                    posted: \"2022-01-03T09:00:00Z\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /comments/{id}:\r\n    get:\r\n      operationId: getComment\r\n      summary: Get a comment\r\n      description: Get a comment\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Comment ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the specified comment\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Comment'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 501\r\n                    content: \"A single comment\"\r\n                    task_id: 1111\r\n                    project_id: null\r\n                    posted: \"2022-01-01T12:00:00Z\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Comment does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: updateComment\r\n      summary: Update a comment\r\n      description: Update a comment\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Comment ID\r\n          schema:\r\n            type: integer\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/CommentUpdate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the updated comment\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Comment'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 501\r\n                    content: \"Updated comment\"\r\n                    task_id: 1111\r\n                    project_id: null\r\n                    posted: \"2022-01-01T12:00:00Z\"\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Comment does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    delete:\r\n      operationId: deleteComment\r\n      summary: Delete a comment\r\n      description: Delete a comment\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Comment ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '204':\r\n          description: No Content - Comment successfully deleted\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Comment does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  ########################################\r\n  #               LABELS                 #\r\n  ########################################\r\n\r\n  /labels:\r\n    get:\r\n      operationId: getLabels\r\n      summary: Get all personal labels\r\n      description: Get all personal labels\r\n      responses:\r\n        '200':\r\n          description: OK - Returns an array of personal labels\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Label'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    - id: 100\r\n                      name: \"urgent\"\r\n                      color: \"green\"\r\n                      order: 1\r\n                      is_favorite: false\r\n                    - id: 101\r\n                      name: \"home\"\r\n                      color: \"blue\"\r\n                      order: 2\r\n                      is_favorite: false\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: createLabel\r\n      summary: Create a new personal label\r\n      description: Create a new personal label\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/LabelCreate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the newly created label\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Label'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 200\r\n                    name: \"new label\"\r\n                    color: \"red\"\r\n                    order: 1\r\n                    is_favorite: true\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /labels/{id}:\r\n    get:\r\n      operationId: getLabel\r\n      summary: Get a personal label\r\n      description: Get a personal label\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Label ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the specified label\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Label'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 100\r\n                    name: \"urgent\"\r\n                    color: \"green\"\r\n                    order: 1\r\n                    is_favorite: false\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Label does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    post:\r\n      operationId: updateLabel\r\n      summary: Update a personal label\r\n      description: Update a personal label\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Label ID\r\n          schema:\r\n            type: integer\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/LabelUpdate'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the updated label\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Label'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 100\r\n                    name: \"very_urgent\"\r\n                    color: \"green\"\r\n                    order: 1\r\n                    is_favorite: true\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Label does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    delete:\r\n      operationId: deleteLabel\r\n      summary: Delete a personal label\r\n      description: Delete a personal label\r\n      parameters:\r\n        - name: id\r\n          in: path\r\n          required: true\r\n          description: Label ID\r\n          schema:\r\n            type: integer\r\n      responses:\r\n        '204':\r\n          description: No Content - Label successfully deleted\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '404':\r\n          description: Not Found - Label does not exist\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /labels/shared:\r\n    get:\r\n      operationId: getSharedLabels\r\n      summary: Get all shared labels\r\n      description: Get all shared labels\r\n      parameters:\r\n        - name: omit_personal\r\n          in: query\r\n          required: false\r\n          schema:\r\n            type: boolean\r\n          description: If set to true, omit personal labels in the response\r\n      responses:\r\n        '200':\r\n          description: OK - Returns an array of shared labels\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Label'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    - id: 300\r\n                      name: \"team\"\r\n                      color: \"yellow\"\r\n                      order: 1\r\n                      is_favorite: false\r\n                    - id: 301\r\n                      name: \"urgent_shared\"\r\n                      color: \"purple\"\r\n                      order: 2\r\n                      is_favorite: false\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    # No request body for GET\r\n\r\n  /labels/shared/rename:\r\n    post:\r\n      operationId: renameSharedLabels\r\n      summary: Rename shared labels\r\n      description: Rename shared labels\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/LabelSharedRename'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns the renamed shared label\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Label'\r\n              examples:\r\n                example:\r\n                  value:\r\n                    id: 300\r\n                    name: \"team-updated\"\r\n                    color: \"yellow\"\r\n                    order: 1\r\n                    is_favorite: false\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n  /labels/shared/remove:\r\n    post:\r\n      operationId: removeSharedLabels\r\n      summary: Remove shared labels\r\n      description: Remove shared labels\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/LabelSharedRemove'\r\n      responses:\r\n        '200':\r\n          description: OK - Returns a success message or updated label data\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:\r\n                  removed:\r\n                    type: boolean\r\n                example:\r\n                  removed: true\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '401':\r\n          description: Unauthorized\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\ncomponents:\r\n  securitySchemes:\r\n    bearerAuth:\r\n      type: http\r\n      scheme: bearer\r\n\r\n  schemas:\r\n    ########################################\r\n    #             COMMON SCHEMAS           #\r\n    ########################################\r\n    Error:\r\n      type: object\r\n      properties:\r\n        error:\r\n          type: string\r\n        error_code:\r\n          type: integer\r\n      required:\r\n        - error\r\n      example:\r\n        error: \"Bad Request\"\r\n        error_code: 400\r\n\r\n    Collaborator:\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n        email:\r\n          type: string\r\n        name:\r\n          type: string\r\n\r\n    ########################################\r\n    #             PROJECT SCHEMAS          #\r\n    ########################################\r\n    Project:\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n        name:\r\n          type: string\r\n        color:\r\n          type: string\r\n        parent_id:\r\n          type: integer\r\n          nullable: true\r\n        order:\r\n          type: integer\r\n        comment_count:\r\n          type: integer\r\n        shared:\r\n          type: boolean\r\n        favorite:\r\n          type: boolean\r\n        inbox_project:\r\n          type: boolean\r\n        url:\r\n          type: string\r\n      required:\r\n        - id\r\n        - name\r\n    ProjectCreate:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          description: Name of the project\r\n        color:\r\n          type: string\r\n          description: Color name or code\r\n        parent_id:\r\n          type: integer\r\n          nullable: true\r\n        favorite:\r\n          type: boolean\r\n      required:\r\n        - name\r\n    ProjectUpdate:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n        color:\r\n          type: string\r\n        favorite:\r\n          type: boolean\r\n\r\n    ########################################\r\n    #             SECTION SCHEMAS          #\r\n    ########################################\r\n    Section:\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n        project_id:\r\n          type: integer\r\n        name:\r\n          type: string\r\n        order:\r\n          type: integer\r\n      required:\r\n        - id\r\n        - project_id\r\n        - name\r\n    SectionCreate:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          description: Name of the section\r\n        project_id:\r\n          type: integer\r\n          description: Project ID to which the section belongs\r\n      required:\r\n        - name\r\n        - project_id\r\n    SectionUpdate:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n\r\n    ########################################\r\n    #              TASK SCHEMAS            #\r\n    ########################################\r\n    Task:\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n        project_id:\r\n          type: integer\r\n          nullable: true\r\n        section_id:\r\n          type: integer\r\n          nullable: true\r\n        content:\r\n          type: string\r\n        description:\r\n          type: string\r\n        completed:\r\n          type: boolean\r\n        label_ids:\r\n          type: array\r\n          items:\r\n            type: integer\r\n        priority:\r\n          type: integer\r\n        order:\r\n          type: integer\r\n      required:\r\n        - id\r\n        - content\r\n        - completed\r\n    TaskCreate:\r\n      type: object\r\n      properties:\r\n        content:\r\n          type: string\r\n          description: The task's text\r\n        description:\r\n          type: string\r\n          description: The task's description\r\n        project_id:\r\n          type: integer\r\n        section_id:\r\n          type: integer\r\n        label_ids:\r\n          type: array\r\n          items:\r\n            type: integer\r\n        priority:\r\n          type: integer\r\n        order:\r\n          type: integer\r\n        due_string:\r\n          type: string\r\n          description: Human-readable date/time\r\n        due_date:\r\n          type: string\r\n          format: date\r\n        due_datetime:\r\n          type: string\r\n          format: date-time\r\n        due_lang:\r\n          type: string\r\n          description: Language for date parsing\r\n      required:\r\n        - content\r\n    TaskUpdate:\r\n      type: object\r\n      properties:\r\n        content:\r\n          type: string\r\n        description:\r\n          type: string\r\n        label_ids:\r\n          type: array\r\n          items:\r\n            type: integer\r\n        priority:\r\n          type: integer\r\n        order:\r\n          type: integer\r\n\r\n    ########################################\r\n    #             COMMENT SCHEMAS          #\r\n    ########################################\r\n    Comment:\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n        content:\r\n          type: string\r\n        task_id:\r\n          type: integer\r\n          nullable: true\r\n        project_id:\r\n          type: integer\r\n          nullable: true\r\n        posted:\r\n          type: string\r\n          format: date-time\r\n      required:\r\n        - id\r\n        - content\r\n    CommentCreate:\r\n      type: object\r\n      properties:\r\n        content:\r\n          type: string\r\n          description: The comment text\r\n        task_id:\r\n          type: integer\r\n          nullable: true\r\n        project_id:\r\n          type: integer\r\n          nullable: true\r\n      required:\r\n        - content\r\n    CommentUpdate:\r\n      type: object\r\n      properties:\r\n        content:\r\n          type: string\r\n\r\n    ########################################\r\n    #              LABEL SCHEMAS           #\r\n    ########################################\r\n    Label:\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n        name:\r\n          type: string\r\n        color:\r\n          type: string\r\n        order:\r\n          type: integer\r\n        is_favorite:\r\n          type: boolean\r\n      required:\r\n        - id\r\n        - name\r\n    LabelCreate:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          description: Name of the label\r\n        color:\r\n          type: string\r\n          description: Color name or code\r\n        order:\r\n          type: integer\r\n        is_favorite:\r\n          type: boolean\r\n      required:\r\n        - name\r\n    LabelUpdate:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n        color:\r\n          type: string\r\n        order:\r\n          type: integer\r\n        is_favorite:\r\n          type: boolean\r\n    LabelSharedRename:\r\n      type: object\r\n      properties:\r\n        old_name:\r\n          type: string\r\n          description: The current name of the shared label\r\n        new_name:\r\n          type: string\r\n          description: The new name for the shared label\r\n      required:\r\n        - old_name\r\n        - new_name\r\n    LabelSharedRemove:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          description: The shared label name to remove\r\n      required:\r\n        - name\r"]},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"serialization_metadata":{"custom_symbol_offsets":[]},"request_id":"8ff3ccaa0c0c5079-ORD","message_source":null,"timestamp_":"absolute","message_type":null},"recipient":"all","channel":null},"parent":"bfe16041-5857-47e7-a3d9-9ff9b4099321","children":["6afb7e2e-11cf-42a6-853e-12e54cdbcdfc"]},"6afb7e2e-11cf-42a6-853e-12e54cdbcdfc":{"id":"6afb7e2e-11cf-42a6-853e-12e54cdbcdfc","message":{"id":"6afb7e2e-11cf-42a6-853e-12e54cdbcdfc","author":{"role":"tool","name":"a8km123","metadata":{}},"create_time":1736419135.839793,"update_time":null,"content":{"content_type":"text","parts":["Verifying style consistency"]},"status":"finished_successfully","end_turn":null,"weight":0,"metadata":{"finished_text":"Thought about Todoist OpenAPI specification for 8 seconds","initial_text":"Thinking","message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"aaa2a0d1-fb68-402e-afc7-a2e5d28ed0b3","request_id":"8ff3ccaa0c0c5079-ORD","timestamp_":"absolute","finish_details":{"type":"interrupted"}},"recipient":"all","channel":null},"parent":"aaa2a0d1-fb68-402e-afc7-a2e5d28ed0b3","children":[]},"aaa2f01c-e554-48bd-89d9-103159526291":{"id":"aaa2f01c-e554-48bd-89d9-103159526291","message":{"id":"aaa2f01c-e554-48bd-89d9-103159526291","author":{"role":"user","name":null,"metadata":{}},"create_time":1736419166.01422,"update_time":null,"content":{"content_type":"text","parts":["Reformat to match this style exactly:\n\nopenapi: 3.1.0\ninfo:\n  title: Todoist REST API\n  description: \"This is the official documentation for the Todoist REST API v2, focusing on core resources: Projects,\n    Sections, Tasks, Comments, and Labels.\"\n  version: 2.0.0\nservers:\n  - url: https://api.todoist.com/rest/v2\n    description: Main (production) server\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Use your personal API token in the format 'Bearer {token}' to authenticate requests.\n  schemas:\n    Project:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Project ID.\n        name:\n          type: string\n          description: Project name.\n        color:\n          type: string\n          description: The color of the project icon.\n        parent_id:\n          type: string\n          nullable: true\n          description: ID of parent project (null for top-level projects).\n        order:\n          type: integer\n          description: Project position under the same parent.\n        comment_count:\n          type: integer\n          description: Number of project comments.\n        is_shared:\n          type: boolean\n          description: Whether the project is shared.\n        is_favorite:\n          type: boolean\n          description: Whether the project is a favorite.\n        is_inbox_project:\n          type: boolean\n          description: Whether the project is the user's Inbox.\n        is_team_inbox:\n          type: boolean\n          description: Whether the project is the Team Inbox.\n        view_style:\n          type: string\n          enum:\n            - list\n            - board\n          description: Determines the way the project is displayed within the Todoist clients.\n        url:\n          type: string\n          description: URL to access this project in the Todoist web or mobile applications.\n      required:\n        - id\n        - name\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message.\npaths:\n  /projects:\n    get:\n      operationId: getProjects\n      summary: Get all projects\n      description: Retrieves a list of all user projects.\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: A JSON array of projects.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Project\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    - id: \"220474322\"\n                      name: Inbox\n                      comment_count: 10\n                      order: 0\n                      color: grey\n                      is_shared: false\n                      is_favorite: false\n                      is_inbox_project: true\n                      is_team_inbox: false\n                      view_style: list\n                      url: https://todoist.com/showProject?id=220474322\n                      parent_id: null\n        4XX:\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        5XX:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n"]},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"request_id":"8ff3cda88b935079-ORD","message_source":null,"timestamp_":"absolute","message_type":null},"recipient":"all","channel":null},"parent":"bfe16041-5857-47e7-a3d9-9ff9b4099321","children":["2897daf8-c946-46a5-8a59-ba90bf8901d4"]},"2897daf8-c946-46a5-8a59-ba90bf8901d4":{"id":"2897daf8-c946-46a5-8a59-ba90bf8901d4","message":{"id":"2897daf8-c946-46a5-8a59-ba90bf8901d4","author":{"role":"tool","name":"a8km123","metadata":{}},"create_time":1736419493.760818,"update_time":null,"content":{"content_type":"text","parts":["**Conforming to structure**\n\nI’m mapping out the user’s specification, confirming the top-level fields: `openapi: 3.1.0`, `info`, `servers`, `components`, and `paths`.\n\n**Matching the specifics**\n\nEnsuring the user/admin's `info`, `servers`, and `components` fields are exact, particularly focusing on `securitySchemes` and other schema details.\n\n**Adapting specs**\n\nI’m adapting the entire specification to the new style, including `id` as strings for `Project`, `Task`, and `Section`, and aligning descriptions like `color` to \"The color of the project icon\".\n\n**Aligning the specifications**\n\nI’m ensuring the entire OpenAPI specification adheres to the new style: `openapi: 3.1.0`, `info`, `servers`, and `paths`. Numeric statuses are quoted, and `color` uses \"grey\" without quotes for consistency.\n\n**Ensuring uniformity**\n\nI’m transforming all endpoints to fit the new style, focusing on properties like `color` as a string and `is_shared`, `is_inbox_project`, `is_team_inbox`, and `is_favorite` as booleans.\n\n**Standardizing terminology**\n\nI’m aligning API schema names to a new convention, transforming terms like \"shared\" to \"is_shared\" and considering a direct equivalent for \"teams_inbox\" to maintain consistency.\n\n**Maintaining uniformity**\n\nI’m aligning `Section`, `Task`, `Comment`, and `Label` schemas with `Project`, ensuring terms like `is_shared` and `is_favorite` are consistently formatted. This approach fosters clarity and consistency.\n\n** Ensuring consistency**\n\nI’m aligning all endpoints with the style of using \"4XX\" and \"5XX\" for errors, defining summaries and descriptions, and maintaining a consistent example schema for responses.\n\n**Ensuring consistency**\n\nI'm working through defining request bodies and examples, like using \"color: grey\" for `POST` endpoints, and noting the absence of path parameters in the snippet.\n\n**Aligning path parameters**\n\nI’m mapping `id` as a string for `Task` and `Section`, matching the snippet's style, and preparing a consistent OpenAPI specification, covering `4XX` and `5XX` errors.\n\n**Crafting the specification**\n\nI’m creating a comprehensive OpenAPI YAML, focusing on consistent parameter and response styles, and ensuring careful handling of indentation and schema definitions for all resources."]},"status":"finished_successfully","end_turn":null,"weight":0,"metadata":{"finished_text":"Thought about Todoist API specification for 44 seconds","initial_text":"Thinking","message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"aaa2f01c-e554-48bd-89d9-103159526291","request_id":"8ff3cda88b935079-ORD","timestamp_":"absolute"},"recipient":"all","channel":null},"parent":"aaa2f01c-e554-48bd-89d9-103159526291","children":["5a2f84bb-79dd-4c51-a1e5-5ad0ca6759e2"]},"5a2f84bb-79dd-4c51-a1e5-5ad0ca6759e2":{"id":"5a2f84bb-79dd-4c51-a1e5-5ad0ca6759e2","message":{"id":"5a2f84bb-79dd-4c51-a1e5-5ad0ca6759e2","author":{"role":"assistant","name":null,"metadata":{}},"create_time":1736419493.760933,"update_time":null,"content":{"content_type":"text","parts":["```yaml\nopenapi: 3.1.0\ninfo:\n  title: Todoist REST API\n  description: \"This is the official documentation for the Todoist REST API v2, focusing on core resources: Projects,\\n  Sections, Tasks, Comments, and Labels.\"\n  version: 2.0.0\nservers:\n  - url: https://api.todoist.com/rest/v2\n    description: Main (production) server\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Use your personal API token in the format 'Bearer {token}' to authenticate requests.\n\n  schemas:\n\n    ########################################\n    #               PROJECTS               #\n    ########################################\n    Project:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Project ID.\n        name:\n          type: string\n          description: Project name.\n        color:\n          type: string\n          description: The color of the project icon.\n        parent_id:\n          type: string\n          nullable: true\n          description: ID of parent project (null for top-level projects).\n        order:\n          type: integer\n          description: Project position under the same parent.\n        comment_count:\n          type: integer\n          description: Number of project comments.\n        is_shared:\n          type: boolean\n          description: Whether the project is shared.\n        is_favorite:\n          type: boolean\n          description: Whether the project is a favorite.\n        is_inbox_project:\n          type: boolean\n          description: Whether the project is the user's Inbox.\n        is_team_inbox:\n          type: boolean\n          description: Whether the project is the Team Inbox.\n        view_style:\n          type: string\n          enum:\n            - list\n            - board\n          description: Determines the way the project is displayed within the Todoist clients.\n        url:\n          type: string\n          description: URL to access this project in the Todoist web or mobile applications.\n      required:\n        - id\n        - name\n\n    ProjectCreate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the new project.\n        color:\n          type: string\n          description: Color of the project icon.\n        parent_id:\n          type: string\n          nullable: true\n          description: ID of parent project (null for top-level).\n        is_favorite:\n          type: boolean\n          description: Whether the project is marked as favorite.\n      required:\n        - name\n\n    ProjectUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Updated name of the project.\n        color:\n          type: string\n          description: Updated color of the project icon.\n        is_favorite:\n          type: boolean\n          description: Whether the project is a favorite.\n\n    ########################################\n    #               SECTIONS               #\n    ########################################\n    Section:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Section ID.\n        project_id:\n          type: string\n          description: Project ID this section belongs to.\n        name:\n          type: string\n          description: Section name.\n        order:\n          type: integer\n          description: The position of the section within the project.\n      required:\n        - id\n        - project_id\n        - name\n\n    SectionCreate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the new section.\n        project_id:\n          type: string\n          description: Project ID to associate this new section with.\n      required:\n        - name\n        - project_id\n\n    SectionUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: New name of the section.\n\n    ########################################\n    #                TASKS                 #\n    ########################################\n    Task:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Task ID.\n        project_id:\n          type: string\n          nullable: true\n          description: Project ID the task belongs to.\n        section_id:\n          type: string\n          nullable: true\n          description: Section ID the task belongs to.\n        content:\n          type: string\n          description: Content of the task.\n        description:\n          type: string\n          description: Optional description of the task.\n        completed:\n          type: boolean\n          description: Whether the task is completed.\n        label_ids:\n          type: array\n          items:\n            type: string\n          description: List of label IDs associated with the task.\n        priority:\n          type: integer\n          description: Task priority from 1 (lowest) to 4 (highest).\n        order:\n          type: integer\n          description: Position of the task in the project or section.\n      required:\n        - id\n        - content\n        - completed\n\n    TaskCreate:\n      type: object\n      properties:\n        content:\n          type: string\n          description: The task's text (required).\n        description:\n          type: string\n          description: Details about the task.\n        project_id:\n          type: string\n          nullable: true\n          description: Project ID for the new task.\n        section_id:\n          type: string\n          nullable: true\n          description: Section ID for the new task.\n        label_ids:\n          type: array\n          items:\n            type: string\n          description: Labels to attach to this task.\n        priority:\n          type: integer\n          description: Task priority from 1 (lowest) to 4 (highest).\n        order:\n          type: integer\n          description: Position of the task in the project or section.\n        due_string:\n          type: string\n          description: Human-readable date/time (e.g., 'tomorrow at 12:00').\n        due_date:\n          type: string\n          format: date\n          description: Due date for the task (YYYY-MM-DD).\n        due_datetime:\n          type: string\n          format: date-time\n          description: Exact due date/time in RFC3339 format.\n        due_lang:\n          type: string\n          description: Language for the date parsing (e.g., 'en').\n      required:\n        - content\n\n    TaskUpdate:\n      type: object\n      properties:\n        content:\n          type: string\n          description: The updated text of the task.\n        description:\n          type: string\n          description: The updated description of the task.\n        label_ids:\n          type: array\n          items:\n            type: string\n          description: Updated list of label IDs.\n        priority:\n          type: integer\n          description: Updated priority from 1 (lowest) to 4 (highest).\n        order:\n          type: integer\n          description: Updated position of the task.\n\n    ########################################\n    #              COMMENTS                #\n    ########################################\n    Comment:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Comment ID.\n        content:\n          type: string\n          description: Text content of the comment.\n        task_id:\n          type: string\n          nullable: true\n          description: Task ID if the comment is associated with a task.\n        project_id:\n          type: string\n          nullable: true\n          description: Project ID if the comment is associated with a project.\n        posted:\n          type: string\n          format: date-time\n          description: Date and time the comment was posted.\n      required:\n        - id\n        - content\n\n    CommentCreate:\n      type: object\n      properties:\n        content:\n          type: string\n          description: The comment text (required).\n        task_id:\n          type: string\n          nullable: true\n          description: Task ID for this comment.\n        project_id:\n          type: string\n          nullable: true\n          description: Project ID for this comment.\n      required:\n        - content\n\n    CommentUpdate:\n      type: object\n      properties:\n        content:\n          type: string\n          description: The updated comment text.\n\n    ########################################\n    #               LABELS                 #\n    ########################################\n    Label:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Label ID.\n        name:\n          type: string\n          description: The name of the label.\n        color:\n          type: string\n          description: The color of the label icon.\n        order:\n          type: integer\n          description: Position of the label in the label list.\n        is_favorite:\n          type: boolean\n          description: Whether the label is marked as favorite.\n      required:\n        - id\n        - name\n\n    LabelCreate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the label (required).\n        color:\n          type: string\n          description: The color of the label icon.\n        order:\n          type: integer\n          description: Position of the label in the label list.\n        is_favorite:\n          type: boolean\n          description: Whether the label is favorite.\n      required:\n        - name\n\n    LabelUpdate:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The updated label name.\n        color:\n          type: string\n          description: The updated label color.\n        order:\n          type: integer\n          description: The updated label position.\n        is_favorite:\n          type: boolean\n          description: Whether the label is now favorite.\n\n    LabelSharedRename:\n      type: object\n      properties:\n        old_name:\n          type: string\n          description: The current name of the shared label.\n        new_name:\n          type: string\n          description: The new name for the shared label.\n      required:\n        - old_name\n        - new_name\n\n    LabelSharedRemove:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The shared label name to remove.\n      required:\n        - name\n\n    ########################################\n    #             COMMON SCHEMAS           #\n    ########################################\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message.\n\npaths:\n\n  ########################################\n  #              PROJECTS                #\n  ########################################\n\n  /projects:\n    get:\n      operationId: getProjects\n      summary: Get all projects\n      description: Retrieves a list of all user projects.\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: A JSON array of projects.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Project\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    - id: \"220474322\"\n                      name: Inbox\n                      comment_count: 10\n                      order: 0\n                      color: grey\n                      is_shared: false\n                      is_favorite: false\n                      is_inbox_project: true\n                      is_team_inbox: false\n                      view_style: list\n                      url: https://todoist.com/showProject?id=220474322\n                      parent_id: null\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: createProject\n      summary: Create a new project\n      description: Creates a new project under the current user.\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Project details to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProjectCreate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  name: \"New Project\"\n                  color: \"red\"\n      responses:\n        \"200\":\n          description: Returns the newly created project object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"123456789\"\n                    name: New Project\n                    color: red\n                    parent_id: null\n                    order: 1\n                    comment_count: 0\n                    is_shared: false\n                    is_favorite: false\n                    is_inbox_project: false\n                    is_team_inbox: false\n                    view_style: list\n                    url: https://todoist.com/showProject?id=123456789\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /projects/{project_id}:\n    get:\n      operationId: getProject\n      summary: Get a project\n      description: Retrieves a specific project by its ID.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: The project ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Returns a single project object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"220474322\"\n                    name: Work\n                    comment_count: 2\n                    order: 1\n                    color: yellow\n                    is_shared: false\n                    is_favorite: false\n                    is_inbox_project: false\n                    is_team_inbox: false\n                    view_style: board\n                    url: https://todoist.com/showProject?id=220474322\n                    parent_id: null\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: updateProject\n      summary: Update a project\n      description: Updates the details of an existing project.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: The project ID.\n          schema:\n            type: string\n      requestBody:\n        description: Fields to update within the project.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProjectUpdate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  name: Updated Project\n                  color: \"blue\"\n      responses:\n        \"200\":\n          description: Returns the updated project object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"220474322\"\n                    name: Updated Project\n                    comment_count: 2\n                    order: 1\n                    color: blue\n                    is_shared: false\n                    is_favorite: true\n                    is_inbox_project: false\n                    is_team_inbox: false\n                    view_style: list\n                    url: https://todoist.com/showProject?id=220474322\n                    parent_id: null\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      operationId: deleteProject\n      summary: Delete a project\n      description: Removes a project from the user's list.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: The project ID.\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The project was deleted successfully.\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /projects/{project_id}/collaborators:\n    get:\n      operationId: getProjectCollaborators\n      summary: Get all collaborators of a project\n      description: Retrieves the list of collaborators for a given project.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: project_id\n          in: path\n          required: true\n          description: The project ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A JSON array of collaborators.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: Collaborator user ID.\n                    email:\n                      type: string\n                      description: Collaborator email address.\n                    name:\n                      type: string\n                      description: Collaborator name.\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    - id: \"101\"\n                      email: collab1@example.com\n                      name: Collab One\n                    - id: \"102\"\n                      email: collab2@example.com\n                      name: Collab Two\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  ########################################\n  #               SECTIONS               #\n  ########################################\n\n  /sections:\n    get:\n      operationId: getSections\n      summary: Get all sections\n      description: Retrieves a list of sections, optionally filtered by project.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: project_id\n          in: query\n          required: false\n          description: Filter by project ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A JSON array of sections.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Section\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    - id: \"98765\"\n                      project_id: \"220474322\"\n                      name: Section 1\n                      order: 1\n                    - id: \"98766\"\n                      project_id: \"220474322\"\n                      name: Section 2\n                      order: 2\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: createSection\n      summary: Create a new section\n      description: Creates a new section within a given project.\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Section details to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SectionCreate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  name: \"New Section\"\n                  project_id: \"220474322\"\n      responses:\n        \"200\":\n          description: Returns the newly created section object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Section\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"99999\"\n                    project_id: \"220474322\"\n                    name: New Section\n                    order: 1\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /sections/{section_id}:\n    get:\n      operationId: getSection\n      summary: Get a section\n      description: Retrieves a specific section by its ID.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: section_id\n          in: path\n          required: true\n          description: The section ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Returns a single section object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Section\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"98765\"\n                    project_id: \"220474322\"\n                    name: Section 1\n                    order: 1\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: updateSection\n      summary: Update a section\n      description: Updates the details of an existing section.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: section_id\n          in: path\n          required: true\n          description: The section ID.\n          schema:\n            type: string\n      requestBody:\n        description: Fields to update within the section.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SectionUpdate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  name: \"Updated Section\"\n      responses:\n        \"200\":\n          description: Returns the updated section object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Section\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"98765\"\n                    project_id: \"220474322\"\n                    name: Updated Section\n                    order: 2\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      operationId: deleteSection\n      summary: Delete a section\n      description: Removes a section from the specified project.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: section_id\n          in: path\n          required: true\n          description: The section ID.\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The section was deleted successfully.\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  ########################################\n  #                TASKS                 #\n  ########################################\n\n  /tasks:\n    get:\n      operationId: getTasks\n      summary: Get active tasks\n      description: Retrieves all active tasks with optional filters.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: project_id\n          in: query\n          required: false\n          description: Filter by project ID.\n          schema:\n            type: string\n        - name: section_id\n          in: query\n          required: false\n          description: Filter by section ID.\n          schema:\n            type: string\n        - name: label\n          in: query\n          required: false\n          description: Filter by label name.\n          schema:\n            type: string\n        - name: filter\n          in: query\n          required: false\n          description: Filter tasks by a Todoist filter.\n          schema:\n            type: string\n        - name: lang\n          in: query\n          required: false\n          description: Language for date parsing.\n          schema:\n            type: string\n        - name: ids\n          in: query\n          required: false\n          description: Comma-separated list of task IDs to retrieve.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A JSON array of tasks.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Task\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    - id: \"1111\"\n                      project_id: \"220474322\"\n                      section_id: \"98765\"\n                      content: \"Example task\"\n                      description: \"\"\n                      completed: false\n                      label_ids: [ \"101\", \"102\" ]\n                      priority: 1\n                      order: 1\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: createTask\n      summary: Create a new task\n      description: Creates a new task in a project or section.\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Task details to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TaskCreate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  content: \"New Task\"\n                  description: \"Example task description\"\n                  project_id: \"220474322\"\n      responses:\n        \"200\":\n          description: Returns the newly created task object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"2222\"\n                    project_id: \"220474322\"\n                    section_id: null\n                    content: \"New Task\"\n                    description: \"Example task description\"\n                    completed: false\n                    label_ids: []\n                    priority: 1\n                    order: 1\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /tasks/{task_id}:\n    get:\n      operationId: getTask\n      summary: Get a task\n      description: Retrieves a specific task by its ID.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: task_id\n          in: path\n          required: true\n          description: The task ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Returns the requested task object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"1111\"\n                    project_id: \"220474322\"\n                    section_id: \"98765\"\n                    content: \"Example task\"\n                    description: \"\"\n                    completed: false\n                    label_ids: [ \"101\", \"102\" ]\n                    priority: 1\n                    order: 1\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: updateTask\n      summary: Update a task\n      description: Updates an existing task.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: task_id\n          in: path\n          required: true\n          description: The task ID.\n          schema:\n            type: string\n      requestBody:\n        description: Fields to update within the task.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TaskUpdate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  content: \"Updated task content\"\n                  priority: 4\n      responses:\n        \"200\":\n          description: Returns the updated task object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"1111\"\n                    project_id: \"220474322\"\n                    section_id: \"98765\"\n                    content: \"Updated task content\"\n                    description: \"Example task description\"\n                    completed: false\n                    label_ids: [ \"101\" ]\n                    priority: 4\n                    order: 2\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      operationId: deleteTask\n      summary: Delete a task\n      description: Removes a task from the user's list.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: task_id\n          in: path\n          required: true\n          description: The task ID.\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The task was deleted successfully.\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /tasks/{task_id}/close:\n    post:\n      operationId: closeTask\n      summary: Close a task\n      description: Closes an active task, marking it as completed.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: task_id\n          in: path\n          required: true\n          description: The task ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Returns the closed (completed) task object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"1111\"\n                    project_id: \"220474322\"\n                    section_id: null\n                    content: \"Task to close\"\n                    description: \"Closing now\"\n                    completed: true\n                    label_ids: []\n                    priority: 1\n                    order: 1\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /tasks/{task_id}/reopen:\n    post:\n      operationId: reopenTask\n      summary: Reopen a task\n      description: Reopens a completed task, marking it as active again.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: task_id\n          in: path\n          required: true\n          description: The task ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Returns the reopened (active) task object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"1111\"\n                    project_id: \"220474322\"\n                    section_id: null\n                    content: \"Reopened task\"\n                    description: \"\"\n                    completed: false\n                    label_ids: []\n                    priority: 1\n                    order: 1\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  ########################################\n  #              COMMENTS                #\n  ########################################\n\n  /comments:\n    get:\n      operationId: getComments\n      summary: Get all comments\n      description: Retrieves all comments for a given project or task (must specify one).\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: project_id\n          in: query\n          required: false\n          description: ID of the project to retrieve comments for.\n          schema:\n            type: string\n        - name: task_id\n          in: query\n          required: false\n          description: ID of the task to retrieve comments for.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A JSON array of comments.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Comment\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    - id: \"501\"\n                      content: \"First comment\"\n                      task_id: \"1111\"\n                      project_id: null\n                      posted: \"2022-01-01T12:00:00Z\"\n                    - id: \"502\"\n                      content: \"Second comment\"\n                      task_id: \"1111\"\n                      project_id: null\n                      posted: \"2022-01-02T12:00:00Z\"\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: createComment\n      summary: Create a new comment\n      description: Creates a new comment on a task or project.\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Comment details to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CommentCreate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  content: \"New comment\"\n                  task_id: \"1111\"\n      responses:\n        \"200\":\n          description: Returns the newly created comment object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"600\"\n                    content: \"New comment\"\n                    task_id: \"1111\"\n                    project_id: null\n                    posted: \"2022-01-03T09:00:00Z\"\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /comments/{comment_id}:\n    get:\n      operationId: getComment\n      summary: Get a comment\n      description: Retrieves a specific comment by its ID.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: comment_id\n          in: path\n          required: true\n          description: The comment ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Returns the requested comment object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"501\"\n                    content: \"A single comment\"\n                    task_id: \"1111\"\n                    project_id: null\n                    posted: \"2022-01-01T12:00:00Z\"\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: updateComment\n      summary: Update a comment\n      description: Updates the content of an existing comment.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: comment_id\n          in: path\n          required: true\n          description: The comment ID.\n          schema:\n            type: string\n      requestBody:\n        description: Fields to update within the comment.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CommentUpdate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  content: \"Updated comment text\"\n      responses:\n        \"200\":\n          description: Returns the updated comment object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"501\"\n                    content: \"Updated comment text\"\n                    task_id: \"1111\"\n                    project_id: null\n                    posted: \"2022-01-01T12:00:00Z\"\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      operationId: deleteComment\n      summary: Delete a comment\n      description: Removes a comment from a task or project.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: comment_id\n          in: path\n          required: true\n          description: The comment ID.\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The comment was deleted successfully.\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  ########################################\n  #               LABELS                 #\n  ########################################\n\n  /labels:\n    get:\n      operationId: getLabels\n      summary: Get all personal labels\n      description: Retrieves all personal labels for the current user.\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: A JSON array of personal labels.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Label\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    - id: \"100\"\n                      name: urgent\n                      color: green\n                      order: 1\n                      is_favorite: false\n                    - id: \"101\"\n                      name: home\n                      color: blue\n                      order: 2\n                      is_favorite: false\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: createLabel\n      summary: Create a new personal label\n      description: Creates a new personal label for the current user.\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Label details to create.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelCreate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  name: \"new label\"\n                  color: \"red\"\n      responses:\n        \"200\":\n          description: Returns the newly created label object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"200\"\n                    name: new label\n                    color: red\n                    order: 3\n                    is_favorite: true\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /labels/{label_id}:\n    get:\n      operationId: getLabel\n      summary: Get a personal label\n      description: Retrieves a specific personal label by its ID.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: label_id\n          in: path\n          required: true\n          description: The label ID.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Returns the requested label object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"100\"\n                    name: urgent\n                    color: green\n                    order: 1\n                    is_favorite: false\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    post:\n      operationId: updateLabel\n      summary: Update a personal label\n      description: Updates the details of an existing personal label.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: label_id\n          in: path\n          required: true\n          description: The label ID.\n          schema:\n            type: string\n      requestBody:\n        description: Fields to update within the label.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelUpdate\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  name: \"very_urgent\"\n                  is_favorite: true\n      responses:\n        \"200\":\n          description: Returns the updated label object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"100\"\n                    name: very_urgent\n                    color: green\n                    order: 1\n                    is_favorite: true\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      operationId: deleteLabel\n      summary: Delete a personal label\n      description: Removes a personal label from the user's list.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: label_id\n          in: path\n          required: true\n          description: The label ID.\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: The label was deleted successfully.\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /labels/shared:\n    get:\n      operationId: getSharedLabels\n      summary: Get all shared labels\n      description: Retrieves shared labels for the current user or team.\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: omit_personal\n          in: query\n          required: false\n          description: If true, only shared labels are returned.\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: A JSON array of shared labels.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Label\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    - id: \"300\"\n                      name: team\n                      color: yellow\n                      order: 1\n                      is_favorite: false\n                    - id: \"301\"\n                      name: urgent_shared\n                      color: purple\n                      order: 2\n                      is_favorite: false\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /labels/shared/rename:\n    post:\n      operationId: renameSharedLabels\n      summary: Rename shared labels\n      description: Renames a shared label.\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Old and new names for the shared label.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelSharedRename\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  old_name: \"team\"\n                  new_name: \"team-updated\"\n      responses:\n        \"200\":\n          description: Returns the updated shared label object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    id: \"300\"\n                    name: team-updated\n                    color: yellow\n                    order: 1\n                    is_favorite: false\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /labels/shared/remove:\n    post:\n      operationId: removeSharedLabels\n      summary: Remove shared labels\n      description: Removes a shared label from the user's list.\n      security:\n        - bearerAuth: []\n      requestBody:\n        description: Shared label name to remove.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LabelSharedRemove\"\n            examples:\n              example-1:\n                summary: Example request\n                value:\n                  name: \"team-updated\"\n      responses:\n        \"200\":\n          description: Indicates whether the shared label was removed.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  removed:\n                    type: boolean\n              examples:\n                example-1:\n                  summary: Example response\n                  value:\n                    removed: true\n        \"4XX\":\n          description: Client error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"5XX\":\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n```"]},"status":"finished_successfully","end_turn":true,"weight":1,"metadata":{"finish_details":{"type":"stop","stop_tokens":[200002]},"is_complete":true,"citations":[],"content_references":[],"message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"2897daf8-c946-46a5-8a59-ba90bf8901d4","request_id":"8ff3cda88b935079-ORD","timestamp_":"absolute","model_switcher_deny":[]},"recipient":"all","channel":null},"parent":"2897daf8-c946-46a5-8a59-ba90bf8901d4","children":["aaa2588a-751e-402e-8420-0fe8fe36ab72"]},"aaa2588a-751e-402e-8420-0fe8fe36ab72":{"id":"aaa2588a-751e-402e-8420-0fe8fe36ab72","message":{"id":"aaa2588a-751e-402e-8420-0fe8fe36ab72","author":{"role":"user","name":null,"metadata":{}},"create_time":1736419607.176759,"update_time":null,"content":{"content_type":"text","parts":["open api spec can only have a max of 30 operations. Keep it to whats included in the doc:\n\nGetting started\r\nIn this section we'll show how to perform some common tasks with the REST API using some simple examples.\r\n\r\nWe show code samples for each scenario using cURL, the Python SDK, and the JavaScript SDK. Use the tabs at the top of the right-hand panel to switch to the examples for each language.\r\n\r\nAll the requests in the examples require a user token for authentication. You can find your personal token in the integrations settings view of the Todoist web app and replace the token value in the samples.\r\n\r\nGet a user's projects\r\nSending the request:\r\n\r\n$ curl -X GET \\\r\n  https://api.todoist.com/rest/v2/projects \\\r\n  -H \"Authorization: Bearer 0123456789abcdef0123456789\"\r\nAn example projects response:\r\n\r\n[\r\n    {\r\n        \"id\": \"220474322\",\r\n        \"name\": \"Inbox\",\r\n        \"comment_count\": 10,\r\n        \"order\": 0,\r\n        \"color\": \"grey\",\r\n        \"is_shared\": false,\r\n        \"is_favorite\": false,\r\n        \"is_inbox_project\": true,\r\n        \"is_team_inbox\": false,\r\n        \"view_style\": \"list\",\r\n        \"url\": \"https://todoist.com/showProject?id=220474322\",\r\n        \"parent_id\": null,\r\n    }\r\n]\r\nFirst, let's see how we can fetch a list of all the projects in a user's account.\r\n\r\nWe send a GET request to the projects endpoint at https://api.todoist.com/rest/v2/projects.\r\n\r\nWith every request to the REST API we pass an authorization header of type Bearer with the token for the user account. In the sample the token is set to 0123456789abcdef0123456789, you should replace this with your own token.\r\n\r\nThe API responds with 200 status, and a JSON array containing the user's projects. In this case they have just one project: Inbox.\r\n\r\nAdding a new project\r\nSending the request:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/projects\" \\\r\n    -X POST \\\r\n    --data '{\"name\": \"Shopping List\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer 0123456789abcdef0123456789\"\r\nThe response containing the project:\r\n\r\n{\r\n    \"id\": \"2203306141\",\r\n    \"name\": \"Shopping List\",\r\n    \"comment_count\": 0,\r\n    \"color\": \"charcoal\",\r\n    \"is_shared\": false,\r\n    \"order\": 1,\r\n    \"is_favorite\": false,\r\n    \"is_inbox_project\": false,\r\n    \"is_team_inbox\": false,\r\n    \"view_style\": \"list\",\r\n    \"url\": \"https://todoist.com/showProject?id=2203306141\",\r\n    \"parent_id\": null\r\n}\r\nNext, let's add a new project to the user's account.\r\n\r\nWe send a POST request to the projects endpoint at https://api.todoist.com/rest/v2/projects.\r\n\r\nAs with the previous request, we send the same authorization header containing the user's token.\r\n\r\nWe'll be sending some JSON data in the body of this request, so we set the Content-Type: application/json header. We also generate and send an ID in the X-Request-Id header. This is optional but can be useful to prevent actions from being duplicated in the case of retrying failed requests. You can find further details about these headers in the Request and response format section.\r\n\r\nIn the body of the request we send a json-encoded object containing the property name with the value Shopping List. Setting the name is mandatory when creating a project, you can find details of the other optional values in the Projects section.\r\n\r\nThe API responds with 200 status, and a JSON object containing the data for the project that was added. Let's make a note of the id value as we'll use that in the next step.\r\n\r\nAdding a new task\r\nSending the request:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/tasks\" \\\r\n    -X POST \\\r\n    --data '{\"content\": \"Buy Milk\", \"project_id\": \"2203306141\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer 0123456789abcdef0123456789\"\r\nThe response containing the task:\r\n\r\n{\r\n    \"id\": \"2995104339\",\r\n    \"content\": \"Buy Milk\",\r\n    \"description\": \"\",\r\n    \"comment_count\": 0,\r\n    \"is_completed\": false,\r\n    \"order\": 1,\r\n    \"priority\": 1,\r\n    \"project_id\": \"2203306141\",\r\n    \"labels\": [],\r\n    \"due\": null,\r\n    \"section_id\": null,\r\n    \"parent_id\": null,\r\n    \"creator_id\": \"2671355\",\r\n    \"created_at\": \"2019-12-11T22:36:50.000000Z\",\r\n    \"assignee_id\": null,\r\n    \"assigner_id\": null,\r\n    \"url\": \"https://todoist.com/showTask?id=2995104339\"\r\n}\r\nNext, let's add a new task to our project.\r\n\r\nAgain, we are sending a POST request, this time to the tasks endpoint at https://api.todoist.com/rest/v2/tasks.\r\n\r\nAs with all requests we provide the Authorization header. We also provide the Content-Type: application/json header and optional X-Request-Id as we are making a POST request.\r\n\r\nWe send JSON again in the post body. In this case we set the content of the task to Buy Milk. We set the optional project_id to the id value from the previous response to add the task to our Shopping List project.\r\n\r\nFor more information on the other optional values you can pass when adding a task, see the Tasks section.\r\n\r\nThe API responds with 200 status, and a JSON object containing the data for the task. We'll keep a note of the task id for use later.\r\n\r\nUpdating a task\r\nSending the request:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/tasks/2995104339\" \\\r\n    -X POST \\\r\n    --data '{\"due_string\": \"tomorrow\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer 0123456789abcdef0123456789\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nSometimes we can't get everything done! We'll need to update the task to remember to get that milk tomorrow.\r\n\r\nWe'll be sending another POST request to update the task. This time we add the id of the task to the url of the tasks endpoint: https://api.todoist.com/rest/v2/tasks/2995104339.\r\n\r\nWe use the same headers for authorization and content-type. We also provide the optional request ID as we have in the previous steps.\r\n\r\nThis time we'll set the due_string property of the task to tomorrow in the JSON post body. The task will be automatically scheduled for tomorrow's date. You can find more information on due dates in our Help Center.\r\n\r\nThe API will respond with status 204 to indicate that the request was successful.\r\n\r\nCompleting a task\r\nSending the request:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/tasks/2995104339/close\" \\\r\n    -X POST \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer 0123456789abcdef0123456789\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nWe finally finished our task! It's time to mark it complete.\r\n\r\nWe send another POST request to the API. This time we add the id of the task to the url of the tasks endpoint, followed by the /close path: https://api.todoist.com/rest/v2/tasks/2995104339/close.\r\n\r\nWe'll pass the authorization header but no need to specify the content-type as there is no content to send in the body of this request. We'll provide the optional request ID as we have in the previous examples.\r\n\r\nThe API will respond with status 204 to indicate that the task has been marked as complete.\r\n\r\nDeleting a project\r\nSending the request:\r\n\r\n$ curl -X DELETE \"https://api.todoist.com/rest/v2/projects/2203306141\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer 0123456789abcdef0123456789\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nWe finished all the tasks in our Shopping List project, so we can now delete it.\r\n\r\nWe'll send a DELETE request this time by adding the id for the project to the projects endpoint: https://api.todoist.com/rest/v2/projects/2203306141.\r\n\r\nAs before, we set the authorization header with our token and provide a value for the optional request ID header.\r\n\r\nThe API responds with status 204 to indicate that the project has been successfully deleted.\r\n\r\nNext Steps\r\nThat's all there is to it! We've covered the basic concepts of interacting with the Todoist REST API and SDK clients.\r\n\r\nYou can find details of all the available endpoints and parameters for the various Todoist entity types in the reference documentation below.\r\n\r\nIn order to make requests for other users you'll need to obtain an auth token from them. You can find details on how to implement this in the Authorization guide.\r\n\r\nAuthorization\r\nAn authenticated request with authorization header:\r\n\r\n$ curl -X GET \\\r\n  https://api.todoist.com/rest/v2/projects \\\r\n  -H \"Authorization: Bearer $token\"\r\nIn order to make authorized calls to the REST API, your application must provide an authorization header with the appropriate Bearer $token. For working through the examples, you can obtain your personal API token from the integrations settings for your account.\r\n\r\nTo authenticate other users your application will need to obtain a token from them using the OAuth protocol. For information on how to obtain a token from our service using OAuth, please see the authorization guide.\r\n\r\nNote that we're using $token on all of our curl examples, so you can define a temporary environment variable containing your token and easily copy & paste curl commands into your terminal.\r\n\r\nProjects\r\nAn example Project object:\r\n\r\n{\r\n    \"id\": \"2203306141\",\r\n    \"name\": \"Shopping List\",\r\n    \"comment_count\": 10,\r\n    \"order\": 1,\r\n    \"color\": \"charcoal\",\r\n    \"is_shared\": false,\r\n    \"is_favorite\": false,\r\n    \"parent_id\": \"220325187\",\r\n    \"is_inbox_project\": false,\r\n    \"is_team_inbox\": false,\r\n    \"view_style\": \"list\",\r\n    \"url\": \"https://todoist.com/showProject?id=2203306141\"\r\n}\r\nProperties\r\nProperty\tDescription\r\nid\r\nString\r\nProject ID.\r\nname\r\nString\r\nProject name.\r\ncolor\r\nString\r\nThe color of the project icon. Refer to the name column in the Colors guide for more info.\r\nparent_id\r\nString\r\nID of parent project (will be null for top-level projects).\r\norder\r\nInteger\r\nProject position under the same parent (read-only, will be 0 for inbox and team inbox projects).\r\ncomment_count\r\nInteger\r\nNumber of project comments.\r\nis_shared\r\nBoolean\r\nWhether the project is shared (read-only, a true or false value).\r\nis_favorite\r\nBoolean\r\nWhether the project is a favorite (a true or false value).\r\nis_inbox_project\r\nBoolean\r\nWhether the project is the user's Inbox (read-only).\r\nis_team_inbox\r\nBoolean\r\nWhether the project is the Team Inbox (read-only).\r\nview_style\r\nString\r\nA string value (either list or board). This determines the way the project is displayed within the Todoist clients.\r\nurl\r\nString\r\nURL to access this project in the Todoist web or mobile applications.\r\nGet all projects\r\nGet all projects:\r\n\r\n$ curl -X GET \\\r\n  https://api.todoist.com/rest/v2/projects \\\r\n  -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n[\r\n    {\r\n        \"id\": \"220474322\",\r\n        \"name\": \"Inbox\",\r\n        \"comment_count\": 10,\r\n        \"order\": 0,\r\n        \"color\": \"grey\",\r\n        \"is_shared\": false,\r\n        \"is_favorite\": false,\r\n        \"is_inbox_project\": true,\r\n        \"is_team_inbox\": false,\r\n        \"view_style\": \"list\",\r\n        \"url\": \"https://todoist.com/showProject?id=220474322\",\r\n        \"parent_id\": null,\r\n    }\r\n]\r\nReturns JSON-encoded array containing all user projects.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nCreate a new project\r\nCreate a new project:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/projects\" \\\r\n    -X POST \\\r\n    --data '{\"name\": \"Shopping List\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"id\": \"2203306141\",\r\n    \"name\": \"Shopping List\",\r\n    \"comment_count\": 0,\r\n    \"color\": \"charcoal\",\r\n    \"is_shared\": false,\r\n    \"order\": 1,\r\n    \"is_favorite\": true,\r\n    \"is_inbox_project\": false,\r\n    \"is_team_inbox\": false,\r\n    \"view_style\": \"list\",\r\n    \"url\": \"https://todoist.com/showProject?id=2203306141\",\r\n    \"parent_id\": null\r\n}\r\nCreates a new project and returns it as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nParameters\r\nParameter\tRequired\tDescription\r\nname\r\nString\r\nYes\tName of the project.\r\nparent_id\r\nString\r\nNo\tParent project ID.\r\ncolor\r\nString\r\nNo\tThe color of the project icon. Refer to the name column in the Colors guide for more info.\r\nis_favorite\r\nBoolean\r\nNo\tWhether the project is a favorite (a true or false value).\r\nview_style\r\nString\r\nNo\tA string value (either list or board, default is list). This determines the way the project is displayed within the Todoist clients.\r\nGet a project\r\nGet a project:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/projects/2203306141\" \\\r\n  -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"id\": \"2203306141\",\r\n    \"name\": \"Shopping List\",\r\n    \"comment_count\": 0,\r\n    \"color\": \"charcoal\",\r\n    \"is_shared\": false,\r\n    \"order\": 1,\r\n    \"is_favorite\": false,\r\n    \"is_inbox_project\": false,\r\n    \"is_team_inbox\": false,\r\n    \"view_style\": \"list\",\r\n    \"url\": \"https://todoist.com/showProject?id=2203306141\",\r\n    \"parent_id\": null\r\n}\r\nReturns a JSON object containing a project object related to the given ID.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nUpdate a project\r\nUpdate a project:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/projects/2203306141\" \\\r\n    -X POST \\\r\n    --data '{\"name\": \"Things To Buy\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"id\": \"2203306141\",\r\n    \"name\": \"Things to buy\",\r\n    \"comment_count\": 0,\r\n    \"color\": \"charcoal\",\r\n    \"is_shared\": false,\r\n    \"order\": 1,\r\n    \"is_favorite\": false,\r\n    \"is_inbox_project\": false,\r\n    \"is_team_inbox\": false,\r\n    \"view_style\": \"list\",\r\n    \"url\": \"https://todoist.com/showProject?id=2203306141\",\r\n    \"parent_id\": null\r\n}\r\nReturns a JSON object containing the updated project object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nParameters\r\nParameter\tRequired\tDescription\r\nname\r\nString\r\nNo\tName of the project.\r\ncolor\r\nString\r\nNo\tThe color of the project icon. Refer to the name column in the Colors guide for more info.\r\nis_favorite\r\nBoolean\r\nNo\tWhether the project is a favorite (a true or false value).\r\nview_style\r\nString\r\nNo\tA string value (either list or board). This determines the way the project is displayed within the Todoist clients.\r\nDelete a project\r\nDelete a project:\r\n\r\n$ curl -X DELETE \"https://api.todoist.com/rest/v2/projects/2203306141\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nDeletes a project and all of its sections and tasks.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nGet all collaborators\r\nGet all collaborators of a shared project:\r\n\r\n$ curl -X GET \\\r\n  \"https://api.todoist.com/rest/v2/projects/2203306141/collaborators\" \\\r\n  -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n[\r\n    {\r\n        \"id\": \"2671362\",\r\n        \"name\": \"Alice\",\r\n        \"email\": \"alice@example.com\"\r\n    },\r\n    {\r\n        \"id\": \"2671366\",\r\n        \"name\": \"Bob\",\r\n        \"email\": \"bob@example.com\"\r\n    }\r\n]\r\nReturns JSON-encoded array containing all collaborators of a shared project.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nSections\r\nAn example Section object:\r\n\r\n{\r\n    \"id\": \"7025\",\r\n    \"project_id\": \"2203306141\",\r\n    \"order\": 1,\r\n    \"name\": \"Groceries\"\r\n}\r\nProperties\r\nProperty\tDescription\r\nid\r\nString\r\nSection id\r\nproject_id\r\nString\r\nID of the project section belongs to\r\norder\r\nInteger\r\nSection position among other sections from the same project\r\nname\r\nString\r\nSection name\r\nGet all sections\r\nGet all sections:\r\n\r\n$ curl -s -H \"Authorization: Bearer $token\" \\\r\n    https://api.todoist.com/rest/v2/sections?project_id=2203306141\r\nExample response:\r\n\r\n[\r\n    {\r\n        \"id\": \"7025\",\r\n        \"project_id\": \"2203306141\",\r\n        \"order\": 1,\r\n        \"name\": \"Groceries\"\r\n    }\r\n]\r\nReturns a JSON array of all sections.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nParameters\r\nParameter\tRequired\tDescription\r\nproject_id\r\nString\r\nNo\tFilter sections by project ID.\r\nCreate a new section\r\nCreate a new section:\r\n\r\n$ curl -s -X POST --data '{\"project_id\":\"2203306141\", \"name\":\"Groceries\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"Authorization: Bearer $token\" \\\r\n    https://api.todoist.com/rest/v2/sections\r\nExample response:\r\n\r\n{\r\n    \"id\": \"7025\",\r\n    \"project_id\": \"2203306141\",\r\n    \"order\": 1,\r\n    \"name\": \"Groceries\"\r\n}\r\nCreates a new section and returns it as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nParameters\r\nParameter\tRequired\tDescription\r\nname\r\nString\r\nYes\tSection name\r\nproject_id\r\nString\r\nYes\tProject ID this section should belong to\r\norder\r\nInteger\r\nNo\tOrder among other sections in a project\r\nGet a single section\r\nGet a single section:\r\n\r\n$ curl -s -H \"Authorization: Bearer $token\" \\\r\n    https://api.todoist.com/rest/v2/sections/7025\r\nExample response:\r\n\r\n{\r\n    \"id\": \"7025\",\r\n    \"project_id\": \"2203306141\",\r\n    \"order\": 1,\r\n    \"name\": \"Groceries\"\r\n}\r\nReturns a single section as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nIf the section's ID has changed (this can happen in some cases when the section is moved to another project), the response will be 301 Moved Permanently, and the new URL is returned in the Location header.\r\n\r\nUpdate a section\r\nUpdate a section:\r\n\r\n$ curl -s -X POST --data '{\"name\":\"Supermarket\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"Authorization: Bearer $token\" \\\r\n    https://api.todoist.com/rest/v2/sections/7025\r\nExample response:\r\n\r\n{\r\n    \"id\": \"7025\",\r\n    \"project_id\": \"2203306141\",\r\n    \"order\": 1,\r\n    \"name\": \"Supermarket\"\r\n}\r\nReturns the updated section as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nParameters\r\nParameter\tRequired\tDescription\r\nname\r\nString\r\nYes\tSection name\r\nDelete a section\r\nDelete a section:\r\n\r\n$ curl -X DELETE -H \"Authorization: Bearer $token\" \\\r\n    https://api.todoist.com/rest/v2/sections/7025\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nDeletes a section and all of its tasks.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nTasks\r\nAn example Task object:\r\n\r\n{\r\n    \"creator_id\": \"2671355\",\r\n    \"created_at\": \"2019-12-11T22:36:50.000000Z\",\r\n    \"assignee_id\": \"2671362\",\r\n    \"assigner_id\": \"2671355\",\r\n    \"comment_count\": 10,\r\n    \"is_completed\": false,\r\n    \"content\": \"Buy Milk\",\r\n    \"description\": \"\",\r\n    \"due\": {\r\n        \"date\": \"2016-09-01\",\r\n        \"is_recurring\": false,\r\n        \"datetime\": \"2016-09-01T12:00:00.000000Z\",\r\n        \"string\": \"tomorrow at 12\",\r\n        \"timezone\": \"Europe/Moscow\"\r\n    },\r\n    \"duration\": {\r\n         \"amount\": 15,\r\n         \"unit\": \"minute\"\r\n    },\r\n    \"id\": \"2995104339\",\r\n    \"labels\": [\"Food\", \"Shopping\"],\r\n    \"order\": 1,\r\n    \"priority\": 1,\r\n    \"project_id\": \"2203306141\",\r\n    \"section_id\": \"7025\",\r\n    \"parent_id\": \"2995104589\",\r\n    \"url\": \"https://todoist.com/showTask?id=2995104339\"\r\n}\r\nProperties\r\nProperty\tDescription\r\nid\r\nString\r\nTask ID.\r\nproject_id\r\nString\r\nTask's project ID (read-only).\r\nsection_id\r\nString\r\nID of section task belongs to (read-only, will be null when the task has no parent section).\r\ncontent\r\nString\r\nTask content. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\ndescription\r\nString\r\nA description for the task. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\nis_completed\r\nBoolean\r\nFlag to mark completed tasks.\r\nlabels\r\nArray of String\r\nThe task's labels (a list of names that may represent either personal or shared labels).\r\nparent_id\r\nString\r\nID of parent task (read-only, will be null for top-level tasks).\r\norder\r\nInteger\r\nPosition under the same parent or project for top-level tasks (read-only).\r\npriority\r\nInteger\r\nTask priority from 1 (normal, default value) to 4 (urgent).\r\ndue\r\nObject\r\nobject representing task due date/time, or null if no date is set (described below).\r\nurl\r\nString\r\nURL to access this task in the Todoist web or mobile applications (read-only).\r\ncomment_count\r\nInteger\r\nNumber of task comments (read-only).\r\ncreated_at\r\nString\r\nThe date when the task was created (read-only).\r\ncreator_id\r\nString\r\nThe ID of the user who created the task (read-only).\r\nassignee_id\r\nString\r\nThe responsible user ID (will be null if the task is unassigned).\r\nassigner_id\r\nString\r\nThe ID of the user who assigned the task (read-only, will be null if the task is unassigned).\r\nduration\r\nObject\r\nObject representing a task's duration. Includes a positive integer (greater than zero) for the amount of time the task will take, and the unit of time that the amount represents which must be either minute or day. Both the amount and unit must be defined. The object will be null if the task has no duration.\r\nDue object\r\nParameter\tRequired\tDescription\r\nstring\r\nString\r\nYes\tHuman defined date in arbitrary format.\r\ndate\r\nString\r\nYes\tDate in format YYYY-MM-DD corrected to user's timezone.\r\nis_recurring\r\nBoolean\r\nYes\tWhether the task has a recurring due date.\r\ndatetime\r\nString\r\nNo\tOnly returned if exact due time set (i.e. it's not a whole-day task), date and time in RFC3339 format in UTC.\r\ntimezone\r\nString\r\nNo\tOnly returned if exact due time set, user's timezone definition either in tzdata-compatible format (\"Europe/Berlin\") or as a string specifying east of UTC offset as \"UTC±HH:MM\" (i.e. \"UTC-01:00\").\r\nGet active tasks\r\nGet active tasks:\r\n\r\n$ curl -X GET \\\r\n  https://api.todoist.com/rest/v2/tasks \\\r\n  -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n[\r\n    {\r\n        \"creator_id\": \"2671355\",\r\n        \"created_at\": \"2019-12-11T22:36:50.000000Z\",\r\n        \"assignee_id\": \"2671362\",\r\n        \"assigner_id\": \"2671355\",\r\n        \"comment_count\": 10,\r\n        \"is_completed\": false,\r\n        \"content\": \"Buy Milk\",\r\n        \"description\": \"\",\r\n        \"due\": {\r\n            \"date\": \"2016-09-01\",\r\n            \"is_recurring\": false,\r\n            \"datetime\": \"2016-09-01T12:00:00.000000Z\",\r\n            \"string\": \"tomorrow at 12\",\r\n            \"timezone\": \"Europe/Moscow\"\r\n        },\r\n        \"duration\": null,\r\n        \"id\": \"2995104339\",\r\n        \"labels\": [\"Food\", \"Shopping\"],\r\n        \"order\": 1,\r\n        \"priority\": 1,\r\n        \"project_id\": \"2203306141\",\r\n        \"section_id\": \"7025\",\r\n        \"parent_id\": \"2995104589\",\r\n        \"url\": \"https://todoist.com/showTask?id=2995104339\"\r\n    },\r\n    ...\r\n]\r\nReturns a JSON-encoded array containing all active tasks.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nParameters\r\nParameter\tRequired\tDescription\r\nproject_id\r\nString\r\nNo\tFilter tasks by project ID.\r\nsection_id\r\nString\r\nNo\tFilter tasks by section ID.\r\nlabel\r\nString\r\nNo\tFilter tasks by label name.\r\nfilter\r\nString\r\nNo\tFilter by any supported filter. Multiple filters (using the comma , operator) are not supported.\r\nlang\r\nString\r\nNo\tIETF language tag defining what language filter is written in, if differs from default English.\r\nids\r\nArray of integers\r\nNo\tA list of the task IDs to retrieve, this should be a comma separated list.\r\nPrecedence of parameters\r\n\r\nWhen fetching a list of tasks, the API will do so in the following order: - filter (with or without lang) - ids - label/project_id/section_id\r\n\r\nIf you include a filter and IDs, only the filter will be used. If you include IDs and project_id, only IDs is used, and so on.\r\n\r\nCreate a new task\r\nCreate a new task:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/tasks\" \\\r\n    -X POST \\\r\n    --data '{\"content\": \"Buy Milk\", \"due_string\": \"tomorrow at 12:00\", \"due_lang\": \"en\", \"priority\": 4}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"creator_id\": \"2671355\",\r\n    \"created_at\": \"2019-12-11T22:36:50.000000Z\",\r\n    \"assignee_id\": null,\r\n    \"assigner_id\": null,\r\n    \"comment_count\": 0,\r\n    \"is_completed\": false,\r\n    \"content\": \"Buy Milk\",\r\n    \"description\": \"\",\r\n    \"due\": {\r\n        \"date\": \"2016-09-01\",\r\n        \"is_recurring\": false,\r\n        \"datetime\": \"2016-09-01T12:00:00.000000Z\",\r\n        \"string\": \"tomorrow at 12\",\r\n        \"timezone\": \"Europe/Moscow\"\r\n    },\r\n    \"duration\": null,\r\n    \"id\": \"2995104339\",\r\n    \"labels\": [],\r\n    \"order\": 1,\r\n    \"priority\": 4,\r\n    \"project_id\": \"2203306141\",\r\n    \"section_id\": null,\r\n    \"parent_id\": null,\r\n    \"url\": \"https://todoist.com/showTask?id=2995104339\"\r\n}\r\nCreates a new task and returns it as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nJSON body parameters\r\nParameter\tRequired\tDescription\r\ncontent\r\nString\r\nYes\tTask content. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\ndescription\r\nString\r\nNo\tA description for the task. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\nproject_id\r\nString\r\nNo\tTask project ID. If not set, task is put to user's Inbox.\r\nsection_id\r\nString\r\nNo\tID of section to put task into.\r\nparent_id\r\nString\r\nNo\tParent task ID.\r\norder\r\nInteger\r\nNo\tNon-zero integer value used by clients to sort tasks under the same parent.\r\nlabels\r\nArray of String\r\nNo\tThe task's labels (a list of names that may represent either personal or shared labels).\r\npriority\r\nInteger\r\nNo\tTask priority from 1 (normal) to 4 (urgent).\r\ndue_string\r\nString\r\nNo\tHuman defined task due date (ex.: \"next Monday\", \"Tomorrow\"). Value is set using local (not UTC) time.\r\ndue_date\r\nString\r\nNo\tSpecific date in YYYY-MM-DD format relative to user’s timezone.\r\ndue_datetime\r\nString\r\nNo\tSpecific date and time in RFC3339 format in UTC.\r\ndue_lang\r\nString\r\nNo\t2-letter code specifying language in case due_string is not written in English.\r\nassignee_id\r\nString\r\nNo\tThe responsible user ID (only applies to shared tasks).\r\nduration\r\nInteger\r\nNo\tA positive (greater than zero) integer for the amount of duration_unit the task will take. If specified, you must define a duration_unit.\r\nduration_unit\r\nString\r\nNo\tThe unit of time that the duration field above represents. Must be either minute or day. If specified, duration must be defined as well.\r\nPlease note that only one of the due_* fields can be used at the same time (due_lang is a special case).\r\n\r\nGet an active task\r\nGet an active task:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/tasks/2995104339\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"creator_id\": \"2671355\",\r\n    \"created_at\": \"2019-12-11T22:36:50.000000Z\",\r\n    \"assignee_id\": \"2671362\",\r\n    \"assigner_id\": \"2671355\",\r\n    \"comment_count\": 10,\r\n    \"is_completed\": false,\r\n    \"content\": \"Buy Milk\",\r\n    \"description\": \"\",\r\n    \"due\": {\r\n        \"date\": \"2016-09-01\",\r\n        \"is_recurring\": false,\r\n        \"datetime\": \"2016-09-01T12:00:00.000000Z\",\r\n        \"string\": \"tomorrow at 12\",\r\n        \"timezone\": \"Europe/Moscow\"\r\n    },\r\n    \"duration\": null,\r\n    \"id\": \"2995104339\",\r\n    \"labels\": [\"Food\", \"Shopping\"],\r\n    \"order\": 1,\r\n    \"priority\": 1,\r\n    \"project_id\": \"2203306141\",\r\n    \"section_id\": \"7025\",\r\n    \"parent_id\": \"2995104589\",\r\n    \"url\": \"https://todoist.com/showTask?id=2995104339\"\r\n}\r\nReturns a single active (non-completed) task by ID as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nIf the task's ID has changed (this can happen in some cases when the task is moved to another project), the response will be 301 Moved Permanently, and the new URL is returned in the Location header.\r\n\r\nUpdate a task\r\nUpdate a task:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/tasks/2995104339\" \\\r\n    -X POST \\\r\n    --data '{\"content\": \"Buy Coffee\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"creator_id\": \"2671355\",\r\n    \"created_at\": \"2019-12-11T22:36:50.000000Z\",\r\n    \"assignee_id\": \"2671362\",\r\n    \"assigner_id\": \"2671355\",\r\n    \"comment_count\": 10,\r\n    \"is_completed\": false,\r\n    \"content\": \"Buy Coffee\",\r\n    \"description\": \"\",\r\n    \"due\": {\r\n        \"date\": \"2016-09-01\",\r\n        \"is_recurring\": false,\r\n        \"datetime\": \"2016-09-01T12:00:00.000000Z\",\r\n        \"string\": \"tomorrow at 12\",\r\n        \"timezone\": \"Europe/Moscow\"\r\n    },\r\n    \"duration\": null,\r\n    \"id\": \"2995104339\",\r\n    \"labels\": [\"Food\", \"Shopping\"],\r\n    \"order\": 1,\r\n    \"priority\": 1,\r\n    \"project_id\": \"2203306141\",\r\n    \"section_id\": \"7025\",\r\n    \"parent_id\": \"2995104589\",\r\n    \"url\": \"https://todoist.com/showTask?id=2995104339\"\r\n}\r\nReturns the updated task as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nJSON body parameters\r\nParameter\tRequired\tDescription\r\ncontent\r\nString\r\nNo\tTask content. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\ndescription\r\nString\r\nNo\tA description for the task. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\nlabels\r\nArray of String\r\nNo\tThe task's labels (a list of names that may represent either personal or shared labels).\r\npriority\r\nInteger\r\nNo\tTask priority from 1 (normal) to 4 (urgent).\r\ndue_string\r\nString\r\nNo\tHuman defined task due date (ex.: \"next Monday\", \"Tomorrow\"). Value is set using local (not UTC) time. Using \"no date\" or \"no due date\" removes the date.\r\ndue_date\r\nString\r\nNo\tSpecific date in YYYY-MM-DD format relative to user’s timezone.\r\ndue_datetime\r\nString\r\nNo\tSpecific date and time in RFC3339 format in UTC.\r\ndue_lang\r\nString\r\nNo\t2-letter code specifying language in case due_string is not written in English.\r\nassignee_id\r\nString\r\nNo\tThe responsible user ID or null to unset (for shared tasks).\r\nduration\r\nInteger\r\nNo\tA positive (greater than zero) integer for the amount of duration_unit the task will take, or null to unset. If specified, you must define a duration_unit.\r\nduration_unit\r\nString\r\nNo\tThe unit of time that the duration field above represents, or null to unset. Must be either minute or day. If specified, duration must be defined as well.\r\nPlease note that only one of the due_* fields can be used at the same time (due_lang is a special case).\r\n\r\nClose a task\r\nClose a task:\r\n\r\n$ curl -X POST \"https://api.todoist.com/rest/v2/tasks/2995104339/close\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nCloses a task.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nThe command performs in the same way as our official clients:\r\n\r\nRegular tasks are marked complete and moved to history, along with their subtasks.\r\nTasks with recurring due dates will be scheduled to their next occurrence.\r\nReopen a task\r\nReopen a task:\r\n\r\n$ curl -X POST \"https://api.todoist.com/rest/v2/tasks/2995104339/reopen\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nReopens a task.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nAny ancestor items or sections will also be marked as uncomplete and restored from history.\r\n\r\nThe reinstated items and sections will appear at the end of the list within their parent, after any previously active items.\r\n\r\nDelete a task\r\nDelete a task:\r\n\r\n$ curl -X DELETE \"https://api.todoist.com/rest/v2/tasks/2995104339\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nDeletes a task.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nComments\r\nAn example Comment object:\r\n\r\n{\r\n    \"content\": \"Need one bottle of milk\",\r\n    \"id\": \"2992679862\",\r\n    \"posted_at\": \"2016-09-22T07:00:00.000000Z\",\r\n    \"project_id\": null,\r\n    \"task_id\": \"2995104339\",\r\n    \"attachment\": {\r\n        \"file_name\": \"File.pdf\",\r\n        \"file_type\": \"application/pdf\",\r\n        \"file_url\": \"https://s3.amazonaws.com/domorebetter/Todoist+Setup+Guide.pdf\",\r\n        \"resource_type\": \"file\"\r\n    }\r\n}\r\nProperties\r\nProperty\tDescription\r\nid\r\nString\r\nComment ID.\r\ntask_id\r\nString\r\nComment's task ID (will be null if the comment belongs to a project).\r\nproject_id\r\nString\r\nComment's project ID (will be null if the comment belongs to a task).\r\nposted_at\r\nString\r\nDate and time when comment was added, RFC3339 format in UTC.\r\ncontent\r\nString\r\nComment content. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\nattachment\r\nObject\r\nAttachment file (will be null if there is no attachment).\r\nThe optional attachment attribute describes object with attachment metadata. Format of this object depends on the kind of attachment it describes, see Sync API documentation for format details.\r\n\r\nGet all comments\r\nGet all comments:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/comments?task_id=2995104339\" \\\r\n  -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n[\r\n    {\r\n        \"content\": \"Need one bottle of milk\",\r\n        \"id\": \"2992679862\",\r\n        \"posted_at\": \"2016-09-22T07:00:00.000000Z\",\r\n        \"project_id\": null,\r\n        \"task_id\": \"2995104339\",\r\n        \"attachment\": {\r\n            \"file_name\": \"File.pdf\",\r\n            \"file_type\": \"application/pdf\",\r\n            \"file_url\": \"https://cdn-domain.tld/path/to/file.pdf\",\r\n            \"resource_type\": \"file\"\r\n        }\r\n    }\r\n]\r\nReturns a JSON-encoded array of all comments for a given task_id or project_id. Note that one of task_id or project_id arguments is required.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nParameters\r\nParameter\tRequired\tDescription\r\nproject_id\r\nString\r\nYes (or task_id)\tID of the project used to filter comments.\r\ntask_id\r\nString\r\nYes (or project_id)\tID of the task used to filter comments.\r\nCreate a new comment\r\nCreate a new comment:\r\n\r\n$ cat > /tmp/note.json\r\n{\r\n    \"task_id\": \"2995104339\",\r\n    \"content\": \"Need one bottle of milk\",\r\n    \"attachment\": {\r\n        \"resource_type\": \"file\",\r\n        \"file_url\": \"https://s3.amazonaws.com/domorebetter/Todoist+Setup+Guide.pdf\",\r\n        \"file_type\": \"application/pdf\",\r\n        \"file_name\": \"File.pdf\"\r\n    }\r\n}\r\n^C\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/comments\" \\\r\n    -X POST \\\r\n    --data @/tmp/note.json \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"content\": \"Need one bottle of milk\",\r\n    \"id\": \"2992679862\",\r\n    \"posted_at\": \"2016-09-22T07:00:00.000000Z\",\r\n    \"project_id\": null,\r\n    \"task_id\": \"2995104339\",\r\n    \"attachment\": {\r\n        \"file_name\": \"File.pdf\",\r\n        \"file_type\": \"application/pdf\",\r\n        \"file_url\": \"https://s3.amazonaws.com/domorebetter/Todoist+Setup+Guide.pdf\",\r\n        \"resource_type\": \"file\"\r\n    }\r\n}\r\nCreates a new comment on a project or task and returns it as a JSON object. Note that one of task_id or project_id arguments is required.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nJSON body parameters\r\nParameter\tRequired\tDescription\r\ntask_id\r\nString\r\nYes (or project_id)\tComment's task ID (for task comments).\r\nproject_id\r\nString\r\nYes (or task_id)\tComment's project ID (for project comments).\r\ncontent\r\nString\r\nYes\tComment content. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\nattachment\r\nObject\r\nNo\tObject for attachment object.\r\nGet a comment\r\nGet a comment:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/comments/2992679862\" \\\r\n  -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"content\": \"Need one bottle of milk\",\r\n    \"id\": \"2992679862\",\r\n    \"posted_at\": \"2016-09-22T07:00:00.000000Z\",\r\n    \"project_id\": null,\r\n    \"task_id\": \"2995104339\",\r\n    \"attachment\": {\r\n        \"file_name\": \"File.pdf\",\r\n        \"file_type\": \"application/pdf\",\r\n        \"file_url\": \"https://s3.amazonaws.com/domorebetter/Todoist+Setup+Guide.pdf\",\r\n        \"resource_type\": \"file\"\r\n    }\r\n}\r\nReturns a single comment as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nUpdate a comment\r\nUpdate a comment:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/comments/2992679862\" \\\r\n    -X POST \\\r\n    --data '{\"content\": \"Need two bottles of milk\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"content\": \"Need two bottles of milk\",\r\n    \"id\": \"2992679862\",\r\n    \"posted_at\": \"2016-09-22T07:00:00.000000Z\",\r\n    \"project_id\": null,\r\n    \"task_id\": \"2995104339\",\r\n    \"attachment\": {\r\n        \"file_name\": \"File.pdf\",\r\n        \"file_type\": \"application/pdf\",\r\n        \"file_url\": \"https://s3.amazonaws.com/domorebetter/Todoist+Setup+Guide.pdf\",\r\n        \"resource_type\": \"file\"\r\n    }\r\n}\r\nReturns the updated comment as a JSON object.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nJSON body parameters\r\nParameter\tRequired\tDescription\r\ncontent\r\nString\r\nYes\tNew content for the comment. This value may contain markdown-formatted text and hyperlinks. Details on markdown support can be found in the Text Formatting article in the Help Center.\r\nDelete a comment\r\nDelete a comment:\r\n\r\n$ curl -X DELETE \"https://api.todoist.com/rest/v2/comments/2992679862\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nDeletes a comment.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nLabels\r\nAn example personal label object:\r\n\r\n{\r\n    \"id\": \"2156154810\",\r\n    \"name\": \"Food\",\r\n    \"color\": \"charcoal\",\r\n    \"order\": 1,\r\n    \"is_favorite\": false\r\n}\r\nThere are two types of labels that can be added to Todoist tasks. We refer to these as \"personal\" and \"shared\" labels.\r\n\r\nPersonal labels\r\nLabels created by the current user will show up in their personal label list. These labels can be customized and will stay in their account unless deleted.\r\n\r\nA personal label can be converted to a shared label by the user if they no longer require them to be stored against their account, but they still appear on shared tasks.\r\n\r\nShared labels\r\nA label created by a collaborator that doesn’t share a name with an existing personal label will appear in our clients as a shared label. These labels are gray by default and will only stay in the shared labels list if there are any active tasks with this label.\r\n\r\nA user can convert a shared label to a personal label at any time. The label will then become customizable and will remain in the account even if not assigned to any active tasks.\r\n\r\nYou can find more information on the differences between personal and shared labels in our Help Center.\r\n\r\nProperties (only applicable to personal labels)\r\nProperty\tDescription\r\nid\r\nString\r\nLabel ID.\r\nname\r\nString\r\nLabel name.\r\ncolor\r\nString\r\nThe color of the label icon. Refer to the name column in the Colors guide for more info.\r\norder\r\nInteger\r\nNumber used by clients to sort list of labels.\r\nis_favorite\r\nBoolean\r\nWhether the label is a favorite (a true or false value).\r\nGet all personal labels\r\nGet all personal labels:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/labels\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n[\r\n    {\r\n        \"id\": \"2156154810\",\r\n        \"name\": \"Food\",\r\n        \"color\": \"charcoal\",\r\n        \"order\": 1,\r\n        \"is_favorite\": false\r\n    }\r\n    ...\r\n]\r\nReturns a JSON-encoded array containing all user labels.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nCreate a new personal label\r\nCreate a new personal label:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/labels\" \\\r\n    -X POST \\\r\n    --data '{\"name\": \"Food\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"id\": \"2156154810\",\r\n    \"name\": \"Food\",\r\n    \"color\": \"charcoal\",\r\n    \"order\": 1,\r\n    \"is_favorite\": false\r\n}\r\nCreates a new personal label and returns its object as JSON.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nJSON body parameters\r\nParameter\tRequired\tDescription\r\nname\r\nString\r\nYes\tName of the label.\r\norder\r\nInteger\r\nNo\tLabel order.\r\ncolor\r\nString\r\nNo\tThe color of the label icon. Refer to the name column in the Colors guide for more info.\r\nis_favorite\r\nBoolean\r\nNo\tWhether the label is a favorite (a true or false value).\r\nGet a personal label\r\nGet a personal label:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/labels/2156154810\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"id\": \"2156154810\",\r\n    \"name\": \"Food\",\r\n    \"color\": \"charcoal\",\r\n    \"order\": 1,\r\n    \"is_favorite\": false\r\n}\r\nReturns a personal label by ID.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nUpdate a personal label\r\nUpdate a personal label:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/labels/2156154810\" \\\r\n    -X POST \\\r\n    --data '{\"name\": \"Drinks\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n{\r\n    \"id\": \"2156154810\",\r\n    \"name\": \"Drinks\",\r\n    \"color\": \"charcoal\",\r\n    \"order\": 1,\r\n    \"is_favorite\": false\r\n}\r\nReturns the updated label.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nJSON body parameters\r\nParameter\tRequired\tDescription\r\nname\r\nString\r\nNo\tNew name of the label.\r\norder\r\nInteger\r\nNo\tNumber that is used by clients to sort list of labels.\r\ncolor\r\nString\r\nNo\tThe color of the label icon. Refer to the name column in the Colors guide for more info.\r\nis_favorite\r\nBoolean\r\nNo\tWhether the label is a favorite (a true or false value).\r\nDelete a personal label\r\nDelete a personal label:\r\n\r\n$ curl -X DELETE \"https://api.todoist.com/rest/v2/labels/2156154810\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nDeletes a personal label. All instances of the label will be removed from tasks.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nGet all shared labels\r\nGet all shared labels:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/labels/shared\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nExample response:\r\n\r\n[\r\n    \"Label1\",\r\n    \"Label2\",\r\n    \"Label3\"\r\n]\r\nReturns a JSON-encoded array containing the names of all labels currently assigned to tasks.\r\n\r\nBy default, the names of a user's personal labels will also be included. These can be excluded by passing the omit_personal parameter.\r\n\r\nA successful response has 200 OK status and application/json Content-Type.\r\n\r\nParameter\tRequired\tDescription\r\nomit_personal\r\nBoolean\r\nNo\tWhether to exclude the names of the user's personal labels from the results. The default value is false.\r\nRename shared labels\r\nRename shared labels:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/labels/shared/rename\" \\\r\n    -X POST \\\r\n    --data '{\"name\": \"MyLabel\", \"new_name\": \"RenamedLabel\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nRenames all instances of a shared label.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nJSON body parameters\r\nParameter\tRequired\tDescription\r\nname\r\nString\r\nYes\tThe name of the existing label to rename.\r\nnew_name\r\nString\r\nYes\tThe new name for the label.\r\nRemove shared labels\r\nRemove shared labels:\r\n\r\n$ curl \"https://api.todoist.com/rest/v2/labels/shared/remove\" \\\r\n    -X POST \\\r\n    --data '{\"name\": \"MyLabel\"}' \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -H \"X-Request-Id: $(uuidgen)\" \\\r\n    -H \"Authorization: Bearer $token\"\r\nThe API returns an empty response with status 204. SDK clients will respond with true to indicate success.\r\n\r\nRemoves all instances of a shared label from the tasks where it is applied. If no instances of the label name are found, the request will still be considered successful.\r\n\r\nA successful response has 204 No Content status and an empty body.\r\n\r\nJSON body parameters\r\nParameter\tRequired\tDescription\r\nname\r\nString\r\nYes\tThe name of the label to remove.\r\nRequest Limits\r\nPayload Size\r\nThere is currently a 1 MiB HTTP request body limit on POST requests.\r\n\r\nHeader Size\r\nTotal size of HTTP headers cannot exceed 65 KiB.\r\n\r\nProcessing Timeouts\r\nThere is a processing timeout of 15 seconds on each request.\r\n\r\nRate Limiting\r\nFor each user, you can make a maximum of 1000 requests within a 15 minute period."]},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"serialization_metadata":{"custom_symbol_offsets":[]},"request_id":"8ff3d86c38445079-ORD","message_source":null,"timestamp_":"absolute","message_type":null},"recipient":"all","channel":null},"parent":"5a2f84bb-79dd-4c51-a1e5-5ad0ca6759e2","children":["50de8e36-f528-419a-a8b3-d5a893e3aa59"]},"50de8e36-f528-419a-a8b3-d5a893e3aa59":{"id":"50de8e36-f528-419a-a8b3-d5a893e3aa59","message":{"id":"50de8e36-f528-419a-a8b3-d5a893e3aa59","author":{"role":"tool","name":"a8km123","metadata":{}},"create_time":1736419918.108921,"update_time":null,"content":{"content_type":"text","parts":["**Identifying operations**\n\nI’m polishing the OpenAPI spec to include user-related endpoints, ensuring they max out at 30 operations. Next, I’ll identify, define, and categorize these operations.\n\n**Tracking project updates**\n\nI’m listing task operations for project collaboration, including status changes and progress updates. This helps in managing tasks and monitoring progress effectively.\n\n**Deciding on shared labels**\n\nI’m figuring out which shared labels operation to exclude, either renaming or removing. Both options are still under consideration.\n\n**Weighing options**\n\nI’m digging into which operation to skip, like \"GET /projects/{project_id}/collaborators\" or \"POST /labels/shared/remove,\" to keep the OpenAPI spec under 30.\n\n**Revisiting endpoints**\n\nIt's interesting to see that \"POST /projects/{project_id}/collaborators\" isn't in the doc. The doc's 6 project endpoints (get, post, get by id, post by id, delete by id, get collaborators) are all included.\n\n**Adjusting operations**\n\nI’m planning to merge the \"rename shared labels\" and \"remove shared labels\" operations to streamline the OpenAPI spec and comply with the 30-operation limit.\n\n**Adjusting the workflow**\n\nI'm considering removing \"GET /projects/{project_id}/collaborators\" since it's less essential, but the doc includes it. Alternatively, combining \"rename shared labels\" and \"remove shared labels\" into one endpoint would align better with the doc.\n\n**Reducing endpoints**\n\nI’m working through which endpoint to eliminate, likely \"GET /projects/{project_id}/collaborators,\" as it's less essential and the doc includes \"rename shared labels\" and \"remove shared labels\" in separate sections."]},"status":"finished_successfully","end_turn":null,"weight":0,"metadata":{"finished_text":"Thought about Todoist API operations for 56 seconds","initial_text":"Thinking","message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"aaa2588a-751e-402e-8420-0fe8fe36ab72","request_id":"8ff3d86c38445079-ORD","timestamp_":"absolute"},"recipient":"all","channel":null},"parent":"aaa2588a-751e-402e-8420-0fe8fe36ab72","children":["0527dabf-caa6-4582-b631-e0ec0699e988"]},"0527dabf-caa6-4582-b631-e0ec0699e988":{"id":"0527dabf-caa6-4582-b631-e0ec0699e988","message":{"id":"0527dabf-caa6-4582-b631-e0ec0699e988","author":{"role":"assistant","name":null,"metadata":{}},"create_time":1736419666.100938,"update_time":null,"content":{"content_type":"text","parts":[""]},"status":"in_progress","end_turn":null,"weight":1,"metadata":{"citations":[],"content_references":[],"message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"50de8e36-f528-419a-a8b3-d5a893e3aa59","request_id":"8ff3d86c38445079-ORD","timestamp_":"absolute","model_switcher_deny":[]},"recipient":"all","channel":null},"parent":"50de8e36-f528-419a-a8b3-d5a893e3aa59","children":["aaa25cb6-7602-4c75-a82f-e2a0fe0f260a"]},"aaa25cb6-7602-4c75-a82f-e2a0fe0f260a":{"id":"aaa25cb6-7602-4c75-a82f-e2a0fe0f260a","message":{"id":"aaa25cb6-7602-4c75-a82f-e2a0fe0f260a","author":{"role":"user","name":null,"metadata":{}},"create_time":1736534589.470858,"update_time":null,"content":{"content_type":"text","parts":["Complete the following sections with all the available actions for labels. Only print out the labels spec so I can add it to my existing spec.\n\n########################################\r\n  #               LABELS                 #\r\n  ########################################\r\n\r\n  /labels:\r\n    get:\r\n      operationId: getLabels\r\n      summary: Get all personal labels\r\n      description: Retrieves all personal labels for the current user.\r\n      security:\r\n        - bearerAuth: []\r\n      responses:\r\n        \"200\":\r\n          description: A JSON array of personal labels.\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: \"#/components/schemas/Label\"\r\n              examples:\r\n                example-1:\r\n                  summary: Example response\r\n                  value:\r\n                    - id: \"2156154810\"\r\n                      name: \"Food\"\r\n                      color: \"charcoal\"\r\n                      order: 1\r\n                      is_favorite: false\r\n        \"4XX\":\r\n          description: Client error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/Error\"\r\n        \"5XX\":\r\n          description: Server error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/Error\""]},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"serialization_metadata":{"custom_symbol_offsets":[]},"request_id":"8ffecf9ccb552317-ORD","message_source":null,"timestamp_":"absolute","message_type":null},"recipient":"all","channel":null},"parent":"0527dabf-caa6-4582-b631-e0ec0699e988","children":["d2bdee64-94c3-4ff3-9013-5b9636c05c7f"]},"d2bdee64-94c3-4ff3-9013-5b9636c05c7f":{"id":"d2bdee64-94c3-4ff3-9013-5b9636c05c7f","message":{"id":"d2bdee64-94c3-4ff3-9013-5b9636c05c7f","author":{"role":"tool","name":"a8km123","metadata":{}},"create_time":1736534619.958911,"update_time":null,"content":{"content_type":"text","parts":["**Mapping out label endpoints**\n\nI’m detailing label endpoints for the \"labels\" resource in OpenAPI 3.1.0. This includes creating, updating, deleting, and retrieving personal and shared labels, while maintaining the specified endpoint limits.\n\n**Mapping out label actions**\n\nI’m charting the seven label endpoints, covering label creation, retrieval, updating, and deletion. Continuing with the 'getLabels' style ensures clarity and cohesiveness."]},"status":"finished_successfully","end_turn":null,"weight":0,"metadata":{"finished_text":"Thought about label actions for 5 seconds","initial_text":"Thinking","message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"aaa25cb6-7602-4c75-a82f-e2a0fe0f260a","request_id":"8ffecf9ccb552317-ORD","timestamp_":"absolute"},"recipient":"all","channel":null},"parent":"aaa25cb6-7602-4c75-a82f-e2a0fe0f260a","children":["cb7c707b-516e-41cf-9720-5adbcaded5fd"]},"cb7c707b-516e-41cf-9720-5adbcaded5fd":{"id":"cb7c707b-516e-41cf-9720-5adbcaded5fd","message":{"id":"cb7c707b-516e-41cf-9720-5adbcaded5fd","author":{"role":"assistant","name":null,"metadata":{}},"create_time":1736534619.958998,"update_time":null,"content":{"content_type":"text","parts":["```yaml\n########################################\n  #               LABELS                 #\n########################################\n\n/labels:\n  get:\n    operationId: getLabels\n    summary: Get all personal labels\n    description: Retrieves all personal labels for the current user.\n    security:\n      - bearerAuth: []\n    responses:\n      \"200\":\n        description: A JSON array of personal labels.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Label\"\n            examples:\n              example-1:\n                summary: Example response\n                value:\n                  - id: \"2156154810\"\n                    name: \"Food\"\n                    color: \"charcoal\"\n                    order: 1\n                    is_favorite: false\n      \"4XX\":\n        description: Client error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n      \"5XX\":\n        description: Server error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n\n  post:\n    operationId: createLabel\n    summary: Create a new personal label\n    description: Creates a new personal label for the current user.\n    security:\n      - bearerAuth: []\n    requestBody:\n      description: Label details to create.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/LabelCreate\"\n          examples:\n            example-1:\n              summary: Example request\n              value:\n                name: \"Food\"\n                color: \"charcoal\"\n    responses:\n      \"200\":\n        description: Returns the newly created label object.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Label\"\n            examples:\n              example-1:\n                summary: Example response\n                value:\n                  id: \"2156154810\"\n                  name: \"Food\"\n                  color: \"charcoal\"\n                  order: 1\n                  is_favorite: false\n      \"4XX\":\n        description: Client error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n      \"5XX\":\n        description: Server error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n\n/labels/{label_id}:\n  get:\n    operationId: getLabel\n    summary: Get a personal label\n    description: Retrieves a specific personal label by its ID.\n    security:\n      - bearerAuth: []\n    parameters:\n      - name: label_id\n        in: path\n        required: true\n        description: The label ID.\n        schema:\n          type: string\n    responses:\n      \"200\":\n        description: Returns the requested label object.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Label\"\n            examples:\n              example-1:\n                summary: Example response\n                value:\n                  id: \"2156154810\"\n                  name: \"Food\"\n                  color: \"charcoal\"\n                  order: 1\n                  is_favorite: false\n      \"4XX\":\n        description: Client error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n      \"5XX\":\n        description: Server error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n\n  post:\n    operationId: updateLabel\n    summary: Update a personal label\n    description: Updates the details of an existing personal label.\n    security:\n      - bearerAuth: []\n    parameters:\n      - name: label_id\n        in: path\n        required: true\n        description: The label ID.\n        schema:\n          type: string\n    requestBody:\n      description: Fields to update within the label.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/LabelUpdate\"\n          examples:\n            example-1:\n              summary: Example request\n              value:\n                name: \"Drinks\"\n                is_favorite: true\n    responses:\n      \"200\":\n        description: Returns the updated label object.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Label\"\n            examples:\n              example-1:\n                summary: Example response\n                value:\n                  id: \"2156154810\"\n                  name: \"Drinks\"\n                  color: \"charcoal\"\n                  order: 1\n                  is_favorite: true\n      \"4XX\":\n        description: Client error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n      \"5XX\":\n        description: Server error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n\n  delete:\n    operationId: deleteLabel\n    summary: Delete a personal label\n    description: Removes a personal label from the user's list.\n    security:\n      - bearerAuth: []\n    parameters:\n      - name: label_id\n        in: path\n        required: true\n        description: The label ID.\n        schema:\n          type: string\n    responses:\n      \"204\":\n        description: The label was deleted successfully.\n      \"4XX\":\n        description: Client error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n      \"5XX\":\n        description: Server error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n\n/labels/shared:\n  get:\n    operationId: getSharedLabels\n    summary: Get all shared labels\n    description: Retrieves shared labels for the current user or team.\n    security:\n      - bearerAuth: []\n    parameters:\n      - name: omit_personal\n        in: query\n        required: false\n        description: If true, only shared labels are returned.\n        schema:\n          type: boolean\n    responses:\n      \"200\":\n        description: A JSON array of shared label names.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n            examples:\n              example-1:\n                summary: Example response\n                value:\n                  - \"Label1\"\n                  - \"Label2\"\n      \"4XX\":\n        description: Client error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n      \"5XX\":\n        description: Server error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n\n/labels/shared/rename:\n  post:\n    operationId: renameSharedLabels\n    summary: Rename shared labels\n    description: Renames all instances of a shared label.\n    security:\n      - bearerAuth: []\n    requestBody:\n      description: Old and new names for the shared label.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/LabelSharedRename\"\n          examples:\n            example-1:\n              summary: Example request\n              value:\n                name: \"MyLabel\"\n                new_name: \"RenamedLabel\"\n    responses:\n      \"204\":\n        description: The shared label was renamed successfully.\n      \"4XX\":\n        description: Client error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n      \"5XX\":\n        description: Server error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n\n/labels/shared/remove:\n  post:\n    operationId: removeSharedLabels\n    summary: Remove shared labels\n    description: Removes all instances of a shared label from tasks where it is applied.\n    security:\n      - bearerAuth: []\n    requestBody:\n      description: Shared label name to remove.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/LabelSharedRemove\"\n          examples:\n            example-1:\n              summary: Example request\n              value:\n                name: \"MyLabel\"\n    responses:\n      \"204\":\n        description: The shared label was removed successfully.\n      \"4XX\":\n        description: Client error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n      \"5XX\":\n        description: Server error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"\n```"]},"status":"finished_successfully","end_turn":true,"weight":1,"metadata":{"finish_details":{"type":"stop","stop_tokens":[200002]},"is_complete":true,"citations":[],"content_references":[],"message_type":null,"model_slug":"o1","default_model_slug":"o1","parent_id":"d2bdee64-94c3-4ff3-9013-5b9636c05c7f","request_id":"8ffecf9ccb552317-ORD","timestamp_":"absolute","model_switcher_deny":[]},"recipient":"all","channel":null},"parent":"d2bdee64-94c3-4ff3-9013-5b9636c05c7f","children":[]}},"moderation_results":[],"current_node":"cb7c707b-516e-41cf-9720-5adbcaded5fd","plugin_ids":null,"conversation_id":"677fa545-c7c0-8002-a23b-0c0f0bfb92a8","conversation_template_id":null,"gizmo_id":null,"gizmo_type":null,"is_archived":false,"is_starred":null,"safe_urls":["https://api.todoist.com/rest/v2/comments/2992679862","https://api.todoist.com/rest/v2/tasks","https://api.todoist.com/rest/v2/projects/2203306141","https://api.todoist.com/rest/v2/tasks/2995104339","https://api.todoist.com/rest/v2/sections","https://api.todoist.com/rest/v2/labels/shared/rename","https://api.todoist.com/rest/v2/comments?task_id=2995104339","https://api.todoist.com/rest/v2/labels/shared/remove","https://api.todoist.com/rest/v2/tasks/2995104339/close","https://api.todoist.com/rest/v2","https://s3.amazonaws.com/domorebetter/Todoist+Setup+Guide.pdf","https://todoist.com/showProject?id=2203306141","https://todoist.com/showProject?id=220474322","https://todoist.com/showProject?id=123456","https://api.todoist.com/rest/v2/labels/shared","https://api.todoist.com/rest/v2/comments","https://todoist.com/showProject?id=654321","https://todoist.com/showTask?id=2995104339","https://api.todoist.com/rest/v2/sections?project_id=2203306141","https://api.todoist.com/rest/v2/sections/7025","https://api.todoist.com/rest/v2/labels","https://api.todoist.com/rest/v2/tasks/2995104339/reopen","https://api.todoist.com/rest/v2/labels/2156154810","https://api.todoist.com/rest/v2/projects/2203306141/collaborators","https://api.todoist.com/rest/v2/projects"],"default_model_slug":"o1","conversation_origin":null,"voice":null,"async_status":null,"disabled_tool_ids":[]}